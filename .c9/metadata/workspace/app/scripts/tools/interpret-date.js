{"filter":false,"title":"interpret-date.js","tooltip":"/app/scripts/tools/interpret-date.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":2621,"column":25},"action":"insert","lines":["//tries its best to interpret a date string","//requires jquery","//needs a lot of work and tidying up","//prefers english style dates","//let me know if you want to help","//https://github.com/ndxbxrme","//basic usage","//var iD = interpretDate();","//iD.interpretText('tomorrow 3pm')","//iD.formatDuration(iD.interpretDuration('one and a half hours')) / returns '1 hour 30 minutes'","","var interpretDate = function(){","    //sometimes start specifiers get put as periods","\tvar week_start_day = 0;","\tvar INCLUSIVE = true;","\tvar period_specifier = [","\t\t{name:'This',value:'This',is_simple:true},","\t\t{name:'Next',value:'Next',is_simple:true},","\t\t{name:'Previous',value:'Previous',is_simple:true},","\t\t{name:'Rolling Forward',value:'RollingForward',is_simple:true},","\t\t{name:'Rolling Back',value:'RollingBack',is_simple:true},","\t\t{name:'First',value:'First',is_simple:false},","\t\t{name:'Nth',value:'Nth',is_simple:false},","\t\t{name:'Last',value:'Last',is_simple:false},","\t\t{name:'Specific',value:'Specific',is_simple:false}","\t];","\tvar period_type = {","\t\tsimple:[","\t\t\t{name:'Hour',value:'Hour'},","\t\t\t{name:'Day',value:'Day'},","\t\t\t{name:'Week',value:'Week'},","\t\t\t{name:'Month',value:'Month'},","\t\t\t{name:'Year',value:'Year'},","\t\t\t{name:'4 Weeks',value:'4 Weeks'},","\t\t\t{name:'Specific',value:'Specific'}","\t\t],","\t\tcomplex:[","\t\t\t{name:'Hour',value:'Hour'},","\t\t\t{name:'Day',value:'Day'},","\t\t\t{name:'Week',value:'Week'},","\t\t\t{name:'Month',value:'Month'},","\t\t\t{name:'Year',value:'Year'},","\t\t\t{name:'Specific',value:'Specific'}","\t\t]","\t};","\tvar relative_specifier = [","\t\t{name:'This',value:'This'},","\t\t{name:'Next',value:'Next'},","\t\t{name:'Previous',value:'Previous'},","\t\t{name:'Specific',value:'Specific'}","\t];","\tvar relative_type = [","\t\t{name:'Hour',value:'Hour'},","\t\t{name:'Day',value:'Day'},","\t\t{name:'Week',value:'Week'},","\t\t{name:'Month',value:'Month'},","\t\t{name:'Year',value:'Year'}","\t];","\tvar repeat_type = [","\t\t{name:'Day',value:'Day'},","\t\t{name:'Week',value:'Week'},","\t\t{name:'Month',value:'Month'},","\t\t{name:'Year',value:'Year'}","\t];","\tvar split_into = [","\t\t{name:'Don\\'t Split',value:'Total'},","\t\t{name:'Hours',value:'Hours'},","\t\t{name:'Days',value:'Days'},","\t\t{name:'Weeks',value:'Weeks'},","\t\t{name:'Months',value:'Months'},","\t\t{name:'Years',value:'Years'}","\t];","\tvar arrange_by = [","\t\t{name:'Date',value:'Date'},","\t\t{name:'Entered order',value:'Entered'}","\t];","\tfunction reset_date_inputs(){","\t\t$('#period_specifier').html('');","\t\t$.each(period_specifier,function(){","\t\t\t$('#period_specifier').append(\"<option value=\\\"\" + this.value + \"\\\">\" + this.name + \"</option>\");","\t\t});","\t\t$('#period_type').html('');","\t\t$.each(period_type.simple,function(){","\t\t\t$('#period_type').append(\"<option value=\\\"\" + this.value + \"\\\">\" + this.name + \"</option>\");","\t\t});","\t\t$('#relative_specifier').html('');","\t\t$.each(relative_specifier,function(){","\t\t\t$('#relative_specifier').append(\"<option value=\\\"\" + this.value + \"\\\">\" + this.name + \"</option>\");","\t\t});","\t\t$('#relative_type').html('');","\t\t$.each(relative_type,function(){","\t\t\t$('#relative_type').append(\"<option value=\\\"\" + this.value + \"\\\">\" + this.name + \"</option>\");","\t\t});","\t\t$('#repeat_type').html('');","\t\t$.each(repeat_type,function(){","\t\t\t$('#repeat_type').append(\"<option value=\\\"\" + this.value + \"\\\">\" + this.name + \"</option>\");","\t\t});","\t\t$('#split_into').html('');","\t\t$.each(split_into,function(){","\t\t\t$('#split_into').append(\"<option value=\\\"\" + this.value + \"\\\">\" + this.name + \"</option>\");","\t\t});","\t\t$('#arrange_by').html('');","\t\t$.each(arrange_by,function(){","\t\t\t$('#arrange_by').append(\"<option value=\\\"\" + this.value + \"\\\">\" + this.name + \"</option>\");","\t\t});","","\t\t","","\t\t$('#period_specifier').unbind();","\t\t$('#period_specifier').change(change_period_specifier);","\t\tchange_period_specifier();","\t}","\tfunction change_period_specifier() {","\t\t$('#period_specifier_numerator,#period_numerator,#relative,#repeat,#relative_numerator').hide();","\t\t$.each(period_specifier,function(){","\t\t\tif(this.value==$('#period_specifier').val()) {","\t\t\t\tvar types = [];","\t\t\t\tif(this.is_simple){","\t\t\t\t\ttypes = period_type.simple;","\t\t\t\t} else {","\t\t\t\t\ttypes = period_type.complex;","\t\t\t\t\t$('#period_numerator').val('1').show();","\t\t\t\t\t$('#relative,#repeat').show();","\t\t\t\t}","\t\t\t\t$('#period_type').html('');","\t\t\t\t$.each(types,function(){","\t\t\t\t\t$('#period_type').append(\"<option value=\\\"\" + this.value + \"\\\">\" + this.name + \"</option>\");","\t\t\t\t});","\t\t\t}","\t\t});","\t}","\tfunction get_type_index(type) {","\t\tvar year_index = -1;","\t\tfor(var f=0; f<type_order.length; f++){","\t\t\tif(type_order[f].value=='year')","\t\t\t\tyear_index = f;","\t\t\tif(type_order[f].value==type) {","\t\t\t\treturn f;","\t\t\t}","\t\t}","\t\treturn year_index;","\t}","\tvar type_order = [","\t\t{value:'number',base_type:'day'},","\t\t{value:'second',base_type:'time'},","\t\t{value:'minute',base_type:'time'},","\t\t{value:'hour',base_type:'time'},","\t\t{value:'time',base_type:'time'},","\t\t{value:'day_name',base_type:'day'},","\t\t{value:'day',base_type:'day'},","\t\t{value:'week',base_type:'day'},","\t\t{value:'day_month',base_type:'day'},","\t\t{value:'day_name_month',base_type:'day'},","\t\t{value:'month',base_type:'month'},","\t\t{value:'day_name_month_year',base_type:'month'},","\t\t{value:'day_name_year',base_type:'day'},","\t\t{value:'month_year',base_type:'month'},","\t\t{value:'year',base_type:'year'},","\t\t{value:'decade',base_type:'year'},","\t\t{value:'century',base_type:'year'},","\t\t{value:'full_date',base_type:'day'}","\t\t];","\tvar pos_nos = ['first','second','third','fourth','fifth','sixth','seventh','eighth','ninth','tenth','eleventh','twelveth','thirteenth','fourteenth','fifteenth','sixteenth','seventeenth','eighteenth','nineteenth'];","\tvar pos_tens = ['twentieth','thirtieth','fortieth','fiftieth','sixtieth','seventieth','eightieth','ninetieth'];","\tvar num_tens = ['twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety'];","\tvar num_singles = ['one','two','three','four','five','six','seven','eight','nine','ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen'];","\tvar days = ['mon','tue','wed','thu','fri','at','un'];","\tvar months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];","\t//the placement of words in the word list is very important, small words get eaten first so make sure 'to' is above 'tomorrow' etc","\tvar word_list = [","\t\t{word:'the',type:'ignore'},","\t\t{word:'into',type:'ignore'},","\t\t","\t\t{word:'inclusive',value:'inclusive',type:'period_modifier'},","\t\t{word:'inc',value:'inclusive',type:'inclusive'},","\t\t{word:'exclusive',value:'exclusive',type:'period_modifier'},","\t\t{word:'ex',value:'exclusive',type:'inclusive'},","\t\t{word:'total',value:'total',type:'total'},","","\t\t{word:'in',value:' in ',type:'starting_declaration'},","\t\t","\t\t{word:'yesterday',value:'yesterday ',type:'full_date',data:{","\t\t\tperiod_specifier:'last',","\t\t\tperiod_type:'day',","\t\t\tstarting_specifier:'this',","\t\t\tstarting_type:'day'","\t\t}},","\t\t{word:'tomorrow',value:'tomorrow ',type:'full_date',data:{","\t\t\tperiod_specifier:'next',","\t\t\tperiod_type:'day',","\t\t\tstarting_specifier:'this',","\t\t\tstarting_type:'day'","\t\t}},","\t\t{word:'today',value:'today ',type:'full_date',data:{","\t\t\tperiod_specifier:'this',","\t\t\tperiod_type:'day',","\t\t\tstarting_specifier:'this',","\t\t\tstarting_type:'day'","\t\t}},","\t\t{word:'now',value:'now ',type:'full_date',data:{","\t\t\tperiod_specifier:'this',","\t\t\tperiod_type:'minute',","\t\t\tstarting_specifier:'this',","\t\t\tstarting_type:'day'","\t\t}},","","\t\t{word:'ago',value:'ago ',type:'period_modifier'},","\t\t","\t\t{word:'this',value:'this ',type:'period_specifier'},","\t\t{word:'next',value:'next ',type:'period_specifier'},","\t\t{word:'last',value:'last ',type:'period_specifier'},","\t\t{word:'previous',value:'previous ',type:'period_specifier'},","\t\t{word:'first',value:'first ',type:'period_specifier'},","\t\t{word:'rolling forward',value:'rollingforward ',type:'period_specifier'},","\t\t{word:'rolling back',value:'rollingback ',type:'period_specifier'},","\t\t{word:'every',value:'every ',type:'period_specifier',disambiguation:[","\t\t\t\t{after:['date_part']}","\t\t\t]","\t\t},","\t\t{word:'each',value:'every ',type:'period_specifier'},","\t\t{word:'every',type:'repeat_declaration',disambiguation:[","\t\t\t\t{after:['period_type']},","\t\t\t\t{after:['number','period_type']}","\t\t\t]","\t\t},","\t\t{word:'on',value:' on ',type:'starting_declaration'},","\t\t{word:'of',value:' of ',type:'starting_declaration2'},","\t\t{word:'for',value:' for ',type:'starting_declaration'},","\t\t{word:'from',value:' from ',type:'period_declartion'},","\t\t{word:'starting',value:' from ',type:'starting_declaration'},","\t\t{word:'start',value:' from ',type:'starting_declaration'},","\t\t{word:'ending',value:' to ',type:'range_declaration'},","\t\t{word:'end',value:' to ',type:'range_declaration'},","\t\t{word:'to',value:' to ',type:'range_declaration'},","\t\t","\t\t{word:'- ',value:' - ',type:'range_declaration'},","\t\t{word:'-',value:'-',type:'range_declaration'},","\t\t{word:'<',value:'<',type:'range_declaration'},","\t\t{word:'<=',value:'<=',type:'range_declaration'},","\t\t{word:'split',value:'split',type:'split_declaration'},","\t\t{word:'s',type:'ignore'},","","\t\t{word:'minute',value:'minute ',type:'period_type'},","\t\t{word:'hour',value:'hour ',type:'period_type'},","\t\t{word:'day',value:'day ',type:'period_type'},","\t\t{word:'week',value:'week ',type:'period_type'},","\t\t{word:'month',value:'month ',type:'period_type'},","\t\t{word:'year',value:'year ',type:'period_type'},","\t\t{word:'decade',value:'decade ',type:'period_type'},","\t\t{word:'century',value:'century ',type:'period_type'},","","\t\t{word:'half',value:'half ',type:'period_modifier'},","\t\t{word:'quarter',value:'quarter ',type:'period_modifier'},","\t\t{word:'third',value:'third ',type:'period_modifier'},","","\t\t","","\t\t{word:', ',value:' , ',type:'seperator'},","","\t\t{word:'/',value:'/',type:'date_part'},","\t\t{word:'\\\\\\\\',value:'\\\\',type:'date_part'},","\t\t{word:'-',value:'-',type:'date_part'},","\t\t{word:':',value:':',type:'date_part'},","\t\t{word:';',value:';',type:'date_part'},","\t\t{word:'\\\\.',value:'.',type:'date_part'},","\t\t{word:'am',value:'am ',type:'date_part'},","\t\t{word:'pm',value:'pm ',type:'date_part'}/*,","\t\t{word:'a',value:'am ',type:'date_part'},","\t\t{word:'p',value:'pm ',type:'date_part'}*/","\t];","\t/*","\t\tdate","\t\t\tperiod[]","\t\t\t\tspecifier","\t\t\t\t\tnumerator (eg 3rd)","\t\t\t\tnumerator","\t\t\t\ttype","\t\t\tstarting_on","\t\t\t\tspecifier","\t\t\t\ttype","\t\t\tending_on","\t\t\t\tspecifier","\t\t\t\ttype","\t\t\trelative_to","\t\t\t\tspecifier","\t\t\t\ttype","\t\t\trepeat","\t\t\t\ttype","\t\t\t\tammount","\t*/","\tfunction DateRange() {","\t\tthis.object_type = 'date_range';","\t\tthis.from = null;","\t\tthis.to = null;","\t}","\tfunction Range() {","\t\tthis.object_type = 'range';","\t\tthis.from = [];","\t\tthis.to = [];","\t\tthis.get_smallest_type = function(arm) {","\t\t\tvar smallest_type = type_order.length-1;","\t\t\tfor(var n=0; n<this.from.length; n++) {","\t\t\t\t//this.get_largest_type();","\t\t\t\tvar tmp = this.from[n].get_smallest_type();","\t\t\t\tif(tmp>0) //ignore numbers","\t\t\t\t\tif(tmp<smallest_type) smallest_type = tmp;","\t\t\t}","\t\t\tfor(var n=0; n<this.to.length; n++) {","\t\t\t\t//this.get_largest_type();","\t\t\t\tvar tmp = this.to[n].get_smallest_type();","\t\t\t\tif(tmp>0)","\t\t\t\t\tif(tmp<smallest_type) smallest_type = tmp;","\t\t\t}","\t\t\tthis.smallest_type = smallest_type;","\t\t\treturn smallest_type;","\t\t};","\t\tthis.get_largest_type_for_arm = function(arm) {","\t\t\tvar largest_type = -1;","\t\t\tfor(var n=0; n<this[arm].length; n++) {","\t\t\t\tvar tmp = this[arm][n].get_largest_type();","\t\t\t\tif(tmp>largest_type) largest_type = tmp;","\t\t\t}","\t\t\treturn largest_type;","\t\t}","\t\tthis.get_largest_type = function() {","\t\t\tvar largest_type = -1;","\t\t\tvar largest_from = -1;","\t\t\tfor(var n=0; n<this.from.length; n++) {","\t\t\t\t//this.get_largest_type();","\t\t\t\tvar tmp = this.from[n].get_largest_type();","\t\t\t\tif(tmp>largest_type) largest_type = tmp;","\t\t\t}","\t\t\tlargest_from = largest_type;","\t\t\tfor(var n=0; n<this.to.length; n++) {","\t\t\t\t//this.get_largest_type();","\t\t\t\tvar tmp = this.to[n].get_largest_type();","\t\t\t\tif(tmp>largest_type) largest_type = tmp;","\t\t\t}","\t\t\tif(largest_type>largest_from) {","\t\t\t\tthis.largest_arm = 'to';","\t\t\t\tthis.shortest_arm = 'from';","\t\t\t}","\t\t\telse {","\t\t\t\tthis.largest_arm = 'from';","\t\t\t\tthis.shortest_arm = 'to';","\t\t\t}","\t\t\t/*$.each(this.from,function(i){","\t\t\t\tvar tmp = this.get_largest_type();","\t\t\t\tthis.get_smallest_type();","\t\t\t\tif(tmp>largest_type) largest_type = tmp;","\t\t\t});","\t\t\t$.each(this.to,function(i){","\t\t\t\tvar tmp = this.get_largest_type();","\t\t\t\tthis.get_smallest_type();","\t\t\t\tif(tmp>largest_type) largest_type = tmp;","\t\t\t});*/","\t\t\tthis.largest_type = largest_type;","\t\t\treturn largest_type;","\t\t};","\t\tthis.largest_arm = null;","\t\tthis.shortest_arm = null;","\t\tthis.smallest_type = null;","\t\tthis.largest_type = null;","\t\tthis.is_inclusive = function(){","\t\t\tif(this.processed_date) {","\t\t\t\tif(this.processed_date.from.is_inclusive==true) return true;","\t\t\t\tif(this.processed_date.to && this.processed_date.to.is_inclusive==true) return true;","\t\t\t}","\t\t\treturn false;","\t\t}","\t}","\tfunction Period(data){","\t\tthis.object_type = 'period';","\t\tthis.period_specifier = null;","\t\tthis.period_type = null;","\t\tthis.processed_date = null;","\t\tthis.period_modifier = null;","\t\tthis.n_value = null;","\t\tthis.starting_specifier = null;","\t\tthis.starting_type = null;","\t\tthis.starting_date = null;","\t\tthis.starting_modifier = null;","\t\tthis.largest_type = null;","\t\tthis.smallest_type = null;","\t\tthis.is_inclusive = false;","\t\tif(data) {","\t\t\tif(data.period_specifier) this.period_specifier = data.period_specifier;","\t\t\tif(data.period_type) this.period_type = data.period_type;","\t\t\tif(data.processed_date) this.processed_date = data.processed_date;","\t\t\tif(data.period_modifier) this.period_modifier = data.period_modifier;","\t\t\tif(data.n_value) this.n_value = data.n_value;","\t\t\tif(data.starting_specifier) this.starting_specifier = data.starting_specifier;","\t\t\tif(data.starting_type) this.starting_type = data.starting_type;","\t\t\tif(data.starting_date) this.starting_date = data.starting_date;","\t\t\tif(data.starting_modifier) this.starting_modifier = data.starting_modifier;","\t\t}","\t\tthis.get_smallest_type = function(){","\t\t\tvar smallest_type = type_order.length-1;","\t\t\tif(this.period_type!=null) {","\t\t\t\tvar tmp = get_type_index(this.period_type);","\t\t\t\tif(tmp<smallest_type) smallest_type = tmp;","\t\t\t}","\t\t\tif(this.starting_type!=null) {","\t\t\t\tvar tmp = get_type_index(this.starting_type);","\t\t\t\tif(tmp<smallest_type) smallest_type = tmp;","\t\t\t}","\t\t\tif(this.processed_date!=null) {","\t\t\t\tvar tmp = get_type_index(this.processed_date.from.type);","\t\t\t\tif(tmp>0)","\t\t\t\t\tif(tmp<smallest_type) smallest_type = tmp;","\t\t\t\tif(this.processed_date.to) {","\t\t\t\t\ttmp = get_type_index(this.processed_date.to.type);","\t\t\t\t\tif(tmp>0)","\t\t\t\t\t\tif(tmp<smallest_type) smallest_type = tmp;","\t\t\t\t}","\t\t\t}","\t\t\tthis.smallest_type = smallest_type;","\t\t\treturn smallest_type;","\t\t}","\t\tthis.get_largest_type = function(){","\t\t\tvar largest_type = 0;","\t\t\tif(this.period_type!=null) {","\t\t\t\tvar tmp = get_type_index(this.period_type);","\t\t\t\tif(tmp>largest_type) largest_type = tmp;","\t\t\t}","\t\t\tif(this.starting_type!=null) {","\t\t\t\tvar tmp = get_type_index(this.starting_type);","\t\t\t\tif(tmp>largest_type) largest_type = tmp;","\t\t\t}","\t\t\tif(this.processed_date!=null) {","\t\t\t\tvar tmp = get_type_index(this.processed_date.from.type);","\t\t\t\tif(tmp>largest_type) largest_type = tmp;","\t\t\t\tif(this.processed_date.to) {","\t\t\t\t\ttmp = get_type_index(this.processed_date.to.type);","\t\t\t\t\tif(tmp>largest_type) largest_type = tmp;","\t\t\t\t}","\t\t\t}","\t\t\tlargest_type *= 2;","\t\t\tif(this.period_specifier!=null || this.processed_date!=null) largest_type++;","\t\t\tthis.largest_type = largest_type;","\t\t\treturn largest_type;","\t\t}","","","\t\tthis.is_range = function(){","\t\t\tif(this.processed_date!=null&&this.processed_date.to!=null)","\t\t\t\treturn true;","\t\t\telse","\t\t\t\treturn false;","\t\t};","\t\tthis.has_data = function() {","\t\t\tif(this.processed_date!=null||this.period_specifier!=null||this.period_type!=null||this.period_modifier!=null)","\t\t\t\treturn true;","\t\t\telse","\t\t\t\treturn false;","\t\t};","\t\tthis.needs_start = function() {","\t\t\tif(this.starting_date==null&&this.starting_specifier==null&&this.starting_type==null&&this.starting_modifier==null)","\t\t\t\treturn true;","\t\t\telse","\t\t\t\treturn false;","\t\t};","\t\tthis.add_start = function(period) {","\t\t\tthis.starting_specifier = period.period_specifier;","\t\t\tthis.starting_type = period.period_type;","\t\t\tthis.starting_date = period.processed_date;","\t\t\tthis.starting_modifier = period.period_modifier;","\t\t};","\t}","\tfunction sort_by_type(b,a) {","\t\tvar x = a.largest_type;","\t\tvar y = b.largest_type;","\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));","\t}","\tfunction sort_by_number(b,a) {","\t\tvar x = 0;","\t\tvar y = 0;","\t\tif(a.processed_date) x = parseInt(a.processed_date.from.value);","\t\tif(b.processed_date) y = parseInt(b.processed_date.from.value);","\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));","\t}","\tvar range_processed_arr = [];","\tvar last_text = '';","\tfunction interpret_text(text) {","\t\tif(text==last_text) return;","\t\tlast_text = text;","\t\ttext = text.toLowerCase();","\t\ttext = text.replace(/([0-9]+)\\s+([0-9]+)/g,'$1, $2');  //puts a seperator between 2 numbers","\t\t//text = text.replace(/(nd|rd|th)(?=\\s)/gi,'st'); //","\t\ttext = text.replace(/and|&/gi,'');","\t\ttext = text.replace(/\\s+/gi,' '); //remove double spaces","\t\t//trim,replace numbers","\t\ttext = replace_numbers(text);","\t\tvar outarr = extract_words(text);","\t\t//disambiguate ambiguous words","\t\tfor(var f=0; f<outarr.length; f++){","\t\t\tif(outarr[f].disambiguation) {","\t\t\t}","\t\t}","\t\t//send date like chunks to the date processor","\t\tvar date_processed_arr = [];","\t\tvar thisbit = [];","\t\tvar lastbit = null;","\t\tfor(var f=0; f<outarr.length; f++) {","\t\t\t","\t\t\t/*","\t\t\t\tmonth_name","\t\t\t\tday_name","\t\t\t\tnumber","\t\t\t\tunknown","\t\t\t\tdate_part","\t\t\t\tonly if not 1st or last","\t\t\t\t\trange_declaration","\t\t\t\t\tstarting_declaration","\t\t\t*/","\t\t\tswitch(outarr[f].type) {","\t\t\t\tcase 'month_name':","\t\t\t\tcase 'day_name':","\t\t\t\tcase 'number':","\t\t\t\tcase 'unknown':","\t\t\t\tcase 'date_part':","\t\t\t\t\tthisbit[thisbit.length] = {bit:outarr[f],special:false};","\t\t\t\t\tlastbit = null;","\t\t\t\tbreak;","\t\t\t\tcase 'period_specifier_number':","\t\t\t\t\t//if next one is a number then dont send to date processor","\t\t\t\t\tif(outarr[f+1]&&outarr[f+1].type=='number'||lastbit=='special') {","\t\t\t\t\t\tdate_processed_arr = send_to_date_processor(thisbit,lastbit,date_processed_arr);","\t\t\t\t\t\tdate_processed_arr[date_processed_arr.length] = outarr[f];","\t\t\t\t\t\tthisbit = [];","\t\t\t\t\t\tlastbit = null;","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\tthisbit[thisbit.length] = {bit:outarr[f],special:true};","\t\t\t\t\t\tlastbit = null; ///watch this!!!","\t\t\t\t\t}","\t\t\t\tbreak;","\t\t\t\tcase 'range_declaration':","\t\t\t\tcase 'starting_declaration2':","\t\t\t\t\tif(thisbit.length>0) {","\t\t\t\t\t\tthisbit[thisbit.length] = {bit:outarr[f],special:true};","\t\t\t\t\t\tlastbit = 'special';","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\tdate_processed_arr[date_processed_arr.length] = outarr[f];","\t\t\t\t\t}","\t\t\t\tbreak;","\t\t\t\tdefault:","\t\t\t\t\t//send to date processor","\t\t\t\t\t//if the last bit was special then don't send it and remember to add it to the output array","\t\t\t\t\tdate_processed_arr = send_to_date_processor(thisbit,lastbit,date_processed_arr);","\t\t\t\t\tthisbit = [];","\t\t\t\t\tlastbit = null;","\t\t\t\t\tdate_processed_arr[date_processed_arr.length] = outarr[f];","\t\t\t\t\t","\t\t\t\tbreak;","\t\t\t}","\t\t\t","\t\t}","\t\tdate_processed_arr = send_to_date_processor(thisbit,lastbit,date_processed_arr);","\t\tthisbit = [];","\t\tlastbit = null;","\t\t//try and extract some meaning from all this nonsense","\t\t//group together period bits","\t\t//periods consist of a date bit, a period specifer and a period type","\t\t//a period can have up to one of each","\t\t//a declaration starts a new period","\t\t//need to watch for weird periods, hmmm","\t\tvar period_processed_arr = [];","\t\tvar this_period = new Period();","\t\t$.each(date_processed_arr,function(){","\t\t\tswitch (this.type)","\t\t\t{","\t\t\t\tcase 'processed_date':","\t\t\t\tcase 'period_specifier':","\t\t\t\tcase 'period_type':","\t\t\t\tcase 'period_modifier':","\t\t\t\t\tif(this_period[this.type]!=null) {","\t\t\t\t\t\tperiod_processed_arr[period_processed_arr.length] = this_period;","\t\t\t\t\t\tthis_period = new Period();","\t\t\t\t\t}","\t\t\t\t\tif(typeof(this.value)=='string') this_period[this.type]=this.value.replace(/^\\s+|\\s+$/gi,'');","\t\t\t\t\telse this_period[this.type] = this.value;","\t\t\t\t\tbreak;","\t\t\t\tcase 'period_specifier_number':","\t\t\t\t\tif(this_period['period_specifier']!=null) {","\t\t\t\t\t\tperiod_processed_arr[period_processed_arr.length] = this_period;","\t\t\t\t\t\tthis_period = new Period();","\t\t\t\t\t}","\t\t\t\t\tthis_period['period_specifier']='nth';","\t\t\t\t\tthis_period.n_value = this.value;","\t\t\t\t\tbreak;","\t\t\t\tcase 'full_date':","\t\t\t\t\tif(this_period.has_data()) {","\t\t\t\t\t\tperiod_processed_arr[period_processed_arr.length] = this_period;","\t\t\t\t\t\t//this_period = new Period();","\t\t\t\t\t}","\t\t\t\t\tthis_period = new Period(this.data);","\t\t\t\t\tperiod_processed_arr[period_processed_arr.length] = this_period;","\t\t\t\t\tthis_period = new Period();","\t\t\t\t\tbreak;","\t\t\t\tdefault:","\t\t\t\t\tif(this_period.has_data()) {","\t\t\t\t\t\tperiod_processed_arr[period_processed_arr.length] = this_period;","\t\t\t\t\t\tthis_period = new Period();","\t\t\t\t\t}","\t\t\t\t\tperiod_processed_arr[period_processed_arr.length] = this;","\t\t\t\t\tbreak;","\t\t\t","\t\t\t}","\t\t});","\t\tif(this_period.has_data()) {","\t\t\tperiod_processed_arr[period_processed_arr.length] = this_period;","\t\t\tthis_period = new Period();","\t\t}","\t\t//clean up modifiers","\t\t//get split info","\t\t/*var split_period = null;","\t\tfor(var f=0; f<period_processed_arr.length; f++)","\t\t{","\t\t\tif(period_processed_arr[f].word && period_processed_arr[f].type=='split_declaration') {","\t\t\t\tif(period_processed_arr[f+1] && period_processed_arr[f+1].object_type && period_processed_arr[f+1].object_type=='period'","\t\t\t\t\t&& period_processed_arr[f+1].is_range()==false) {","\t\t\t\t\t\tperiod_processed_arr[f+1].period_specifier = 'every';","\t\t\t\t\t\t//split_period = period_processed_arr[f+1];","\t\t\t\t\t\tperiod_processed_arr.splice(f,1/*2* /);","\t\t\t\t\t}","\t\t\t}","\t\t}*/","\t\t/*","\t\t\tfix some bits","\t\t*/","\t\t/*for(var f=0; f<period_processed_arr.length; f++) {","\t\t\tif(period_processed_arr[f].object_type) {","\t\t\t\tif(period_processed_arr[f].object_type=='period') {","\t\t\t\t\tif(period_processed_arr[f].needs_start()==false) {","\t\t\t\t\t\tvar myperiod = new Period();","\t\t\t\t\t\tmyperiod.period_type = period_processed_arr[f].starting_type;","\t\t\t\t\t\tmyperiod.period_specifier = period_processed_arr[f].starting_specifier;","\t\t\t\t\t\tmyperiod.processed_date = period_processed_arr[f].starting_date;","\t\t\t\t\t\tmyperiod.period_modifier = period_processed_arr[f].starting_modifier;","\t\t\t\t\t\tperiod_processed_arr[f].starting_type = null;","\t\t\t\t\t\tperiod_processed_arr[f].starting_specifier = null;","\t\t\t\t\t\tperiod_processed_arr[f].starting_date = null;","\t\t\t\t\t\tperiod_processed_arr[f].starting_modifier = null;","\t\t\t\t\t\tperiod_processed_arr.splice(f,0,myperiod);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}*/","\t\tfor(var f=0; f<period_processed_arr.length; f++) {","\t\t\tif(period_processed_arr[f] && period_processed_arr[f].object_type) {","\t\t\t\tif(period_processed_arr[f].object_type=='period') {","\t\t\t\t\tif(period_processed_arr[f].processed_date) {","\t\t\t\t\t\tif(period_processed_arr[f].processed_date &&","\t\t\t\t\t\t\tperiod_processed_arr[f].processed_date.from.type=='month_year' &&","\t\t\t\t\t\t\tperiod_processed_arr[f].period_type!=null) {","\t\t\t\t\t\t\t","\t\t\t\t\t\t\tvar bit_match = period_processed_arr[f].processed_date.from.value.match(/^([0-9]+)[^0-9]+([0-9]+)/);","\t\t\t\t\t\t\tif(bit_match!=null) {","","\t\t\t\t\t\t\t\tvar bit_period = new Period();","\t\t\t\t\t\t\t\tbit_period.period_type = period_processed_arr[f].period_type;","\t\t\t\t\t\t\t\tbit_period.processed_date = {from:{value:bit_match[1],type:'number'}};","\t\t\t\t\t\t\t\tvar year_period = new Period();","\t\t\t\t\t\t\t\tyear_period.processed_date = {from:{value:bit_match[2],type:'year'}};","\t\t\t\t\t\t\t\tperiod_processed_arr.splice(f,1,bit_period,year_period);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t\telse {","\t\t\t\t\t\t\t//split complex types","\t\t\t\t\t\t\tif(period_processed_arr[f].is_range()==true) {","\t\t\t\t\t\t\t\tvar my_range = new Range();","\t\t\t\t\t\t\t\tsplit_complex_types(period_processed_arr[f].processed_date.from,null,my_range.from,0,period_processed_arr[f],'from').add_arr;","\t\t\t\t\t\t\t\tsplit_complex_types(period_processed_arr[f].processed_date.to,null,my_range.to,0,period_processed_arr[f],'to').add_arr;","\t\t\t\t\t\t\t\tperiod_processed_arr.splice(f,1,my_range);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\telse {","\t\t\t\t\t\t\t\tsplit_complex_types(period_processed_arr[f].processed_date.from,period_processed_arr,null,f,period_processed_arr[f],'from');","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\t//unfuck periods","\t\tfor(var f=0; f<period_processed_arr.length; f++) {","\t\t\tif(period_processed_arr[f] && period_processed_arr[f].object_type) {","\t\t\t\tif(period_processed_arr[f].object_type=='period') {","\t\t\t\t\tif(period_processed_arr[f].period_type!=null && period_processed_arr[f].period_specifier!=null && period_processed_arr[f].processed_date","\t\t\t\t\t\t&& period_processed_arr[f].processed_date.from.value!=null && period_processed_arr[f].processed_date.from.type!='number') {","\t\t\t\t\t\tvar my_period = new Period();","\t\t\t\t\t\tmy_period.period_type = period_processed_arr[f].period_type;","\t\t\t\t\t\tmy_period.period_specifier = period_processed_arr[f].period_specifier;","\t\t\t\t\t\tperiod_processed_arr[f].period_type = null;","\t\t\t\t\t\tperiod_processed_arr[f].period_specifier = null;","\t\t\t\t\t\tperiod_processed_arr.splice(f,0,my_period);","\t\t\t\t\t}","\t\t\t\t\tif(period_processed_arr[f].period_modifier=='ago' && f>0) {","\t\t\t\t\t\tif(period_processed_arr[f].period_type==null) {","\t\t\t\t\t\t\tperiod_processed_arr[f].period_type = period_processed_arr[f-1].period_type;","\t\t\t\t\t\t\tperiod_processed_arr[f-1].period_type = null;","\t\t\t\t\t\t}","\t\t\t\t\t\tif(period_processed_arr[f].processed_date==null||isNaN(period_processed_arr[f].processed_date.from.value)) {","\t\t\t\t\t\t\tif(period_processed_arr[f-1].processed_date!=null && period_processed_arr[f-1].processed_date.from.type=='number') {","\t\t\t\t\t\t\t\tperiod_processed_arr[f].processed_date = period_processed_arr[f-1].processed_date;","\t\t\t\t\t\t\t\tperiod_processed_arr[f-1].processed_date = null;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\telse {","\t\t\t\t\t\t\t\tperiod_processed_arr[f].processed_date = {from:{value:1,type:'number'}};","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","","\t\t","\t\t//collapse ranges","\t\tvar period_arr = [];","\t\trange_processed_arr = [];","\t\tvar my_range = new Range();","\t\tfor(var f=0; f<period_processed_arr.length; f++)","\t\t{","\t\t\t//if it's a declaration (not period or range) or a period that's already a range","\t\t\t//dump the contents of period_arr either into range_processed_arr or my_range if 'from' != [] (then clear my_range and period_arr)","\t\t\t//if it's a period then write it to range_processed_arr","\t\t\tif((period_processed_arr[f].word && (","\t\t\t\t\tperiod_processed_arr[f].type=='starting_declaration'","\t\t\t\t\t/*|| period_processed_arr[f].type=='starting_declaration2'*/","\t\t\t\t\t|| period_processed_arr[f].type=='split_declaration')","\t\t\t\t\t)","\t\t\t\t||(period_processed_arr[f].object_type && period_processed_arr[f].object_type=='period' && period_processed_arr[f].is_range()==true)","\t\t\t\t||(period_processed_arr[f].object_type && period_processed_arr[f].object_type=='range')) {","\t\t\t\tif(my_range.from.length>0) {","\t\t\t\t\tmy_range.to = period_arr;","\t\t\t\t\trange_processed_arr[range_processed_arr.length] = my_range;","\t\t\t\t} else {","\t\t\t\t\tfor(var n =0 ;n<period_arr.length; n++) {","\t\t\t\t\t\trange_processed_arr[range_processed_arr.length] = period_arr[n];","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif(period_processed_arr[f].object_type)","\t\t\t\t\trange_processed_arr[range_processed_arr.length] = period_processed_arr[f];","\t\t\t\tperiod_arr = [];","\t\t\t\tmy_range = new Range();","\t\t\t}","\t\t\t//if it's a range_declaration then dump the contents of period_arr into my_range.from (then clear period_arr)","\t\t\telse if(period_processed_arr[f].word && period_processed_arr[f].type=='range_declaration') {","\t\t\t\tmy_range.from = period_arr;","\t\t\t\tperiod_arr = [];","\t\t\t}","\t\t\telse if(period_processed_arr[f].object_type) {","\t\t\t\tperiod_arr[period_arr.length] = period_processed_arr[f];","\t\t\t}","\t\t\t//else, if it's a period add it to period_arr","","\t\t}","\t\tif(my_range.from.length>0) {","\t\t\tif(period_arr.length>0){","\t\t\t\tmy_range.to = period_arr;","\t\t\t\trange_processed_arr[range_processed_arr.length] = my_range;","\t\t\t\tperiod_arr = [];","\t\t\t}","\t\t}","\t\tif(period_arr.length>0) {","\t\t\tfor(var n =0 ;n<period_arr.length; n++) {","\t\t\t\trange_processed_arr[range_processed_arr.length] = period_arr[n];","\t\t\t}","\t\t}","\t\t","\t\t//sort out numbers, times, years","\t\tfor(var f=0; f<range_processed_arr.length; f++) {","\t\t\tif(range_processed_arr[f].object_type) {","\t\t\t\tif(range_processed_arr[f].object_type=='range') {","\t\t\t\t\t//get the smallest date type along each arm","\t\t\t\t\tsmallest_type_index = range_processed_arr[f].get_smallest_type();","\t\t\t\t\t//smallest_type_index_to = range_processed_arr[f].get_smallest_type('to');","\t\t\t\t\tif(smallest_type_index>0) {","\t\t\t\t\t\tfor(var n=0; n<range_processed_arr[f].from.length; n++) ","\t\t\t\t\t\t\trange_processed_arr[f].from[n] = process_number(range_processed_arr[f].from[n],type_order[smallest_type_index].base_type);","\t\t\t\t\t\t","\t\t\t\t\t\tfor(var n=0; n<range_processed_arr[f].to.length; n++)","\t\t\t\t\t\t\trange_processed_arr[f].to[n] = process_number(range_processed_arr[f].to[n],type_order[smallest_type_index].base_type);","\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t\t","\t\t\t\t\t","\t\t\t\t}","\t\t\t\telse if(range_processed_arr[f].object_type=='period') {","\t\t\t\t\t","\t\t\t\t\trange_processed_arr[f] = process_number(range_processed_arr[f],'year');","\t\t\t\t}","\t\t\t}","","\t\t}","","\t\t//sort it out","\t\tfor(var f=0; f<range_processed_arr.length; f++) {","\t\t\tif(range_processed_arr[f].object_type) {","\t\t\t\tif(range_processed_arr[f].object_type=='range') {","\t\t\t\t\trange_processed_arr[f].get_largest_type(); //gonna use this later","\t\t\t\t\trange_processed_arr[f].from.sort(sort_by_number);","\t\t\t\t\trange_processed_arr[f].to.sort(sort_by_number);","\t\t\t\t\trange_processed_arr[f].from.sort(sort_by_type);","\t\t\t\t\trange_processed_arr[f].to.sort(sort_by_type);","\t\t\t\t}","\t\t\t\telse if(range_processed_arr[f].object_type=='period') {","\t\t\t\t\trange_processed_arr[f].get_largest_type();","\t\t\t\t}","\t\t\t}","\t\t}","\t\trange_processed_arr.sort(sort_by_number);","\t\trange_processed_arr.sort(sort_by_type);","\t\t//ballance simple ranges - could be done on the fly","\t\t//find largest types","\t\t//process the fuck out of it","\t\t//if","\t\t/*if(split_period!=null) {","\t\t\tsplit_period.get_largest_type();","\t\t\trange_processed_arr[range_processed_arr.length] = split_period;","\t\t}*/","","\t\tvar now_date = new Date();","\t\tfor(var f=0; f<range_processed_arr.length; f++) {","\t\t\tif(range_processed_arr[f].object_type) {","\t\t\t\tif(range_processed_arr[f].object_type=='period' && range_processed_arr[f].period_modifier=='ago') {","\t\t\t\t\tif(range_processed_arr[f].processed_date && range_processed_arr[f].processed_date.from.type=='number') {","\t\t\t\t\t\tvar thisval = parseInt(range_processed_arr[f].processed_date.from.value);","\t\t\t\t\t\tswitch(range_processed_arr[f].period_type) {","\t\t\t\t\t\t\tcase 'year':","\t\t\t\t\t\t\t\tnow_date = new Date(now_date.getFullYear() - thisval,now_date.getMonth(),now_date.getDate());","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\tcase 'month':","\t\t\t\t\t\t\t\tnow_date = new Date(now_date.getFullYear(),now_date.getMonth() - thisval,now_date.getDate());","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\tcase 'week':","\t\t\t\t\t\t\t\tnow_date =  new Date(now_date.getFullYear(),now_date.getMonth(),now_date.getDate() - (thisval * 7));","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\tcase 'day':","\t\t\t\t\t\t\t\tnow_date =  new Date(now_date.getFullYear(),now_date.getMonth(),now_date.getDate() - (thisval));","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\tcase 'hour':","\t\t\t\t\t\t\t\tnow_date =  new Date(now_date.getFullYear(),now_date.getMonth(),now_date.getDate() - (thisval * 7));","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\tcase 'minute':","\t\t\t\t\t\t\t\tnow_date =  new Date(now_date.getFullYear(),now_date.getMonth(),now_date.getDate() - (thisval * 7));","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\tcase 'second':","\t\t\t\t\t\t\t\tnow_date =  new Date(now_date.getFullYear(),now_date.getMonth(),now_date.getDate() - (thisval * 7));","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\trange_processed_arr.splice(f,1);","\t\t\t\t}","\t\t\t}","\t\t}","\t\tvar split_pos = -1;","\t\tvar dates_count = -1;","\t\t dates = [[{from:now_date,to:now_date}]];","\t\t//return;","\t\tfor(var f=0; f<range_processed_arr.length; f++) {","\t\t\tif(range_processed_arr[f].object_type) {","\t\t\t\tdates_count++;","\t\t\t\tdates[dates_count+1] = [];","\t\t\t\tif(range_processed_arr[f].object_type=='period') {","\t\t\t\t\tfor(var n=0;n<dates[dates_count].length; n++) {","\t\t\t\t\t\tvar dates_len = dates[dates_count+1].length;","\t\t\t\t\t\tvar this_dr = process_period(range_processed_arr[f],dates[dates_count][n],null,null);","\t\t\t\t\t\t","\t\t\t\t\t\tif(!this_dr.length>0) {","\t\t\t\t\t\t\tif(this_dr && this_dr.from!=null && this_dr.to!=null && this_dr.from!='Invalid Date' && this_dr.to!='Invalid Date')\t\t\t\tdates[dates_count+1][dates_len] = this_dr;","\t\t\t\t\t\t} else {","\t\t\t\t\t\t\tfor(var j=0;j<this_dr.length;j++) {","\t\t\t\t\t\t\t\tvar dates_len = dates[dates_count+1].length;","\t\t\t\t\t\t\t\tdates[dates_count+1][dates_len] = this_dr[j];","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t//this_dr.concat(dates[dates_count+1]);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\t//if it just has a period_type and maybe a number then it's probably the split","\t\t\t\t\tif(\trange_processed_arr[f].period_specifier==null &&","\t\t\t\t\t\trange_processed_arr[f].period_modifier==null &&","\t\t\t\t\t\trange_processed_arr[f].n_value==null &&","\t\t\t\t\t\trange_processed_arr[f].needs_start()==true &&","\t\t\t\t\t\trange_processed_arr[f].period_type!=null &&","\t\t\t\t\t\t(range_processed_arr[f].processed_date==null ||","\t\t\t\t\t\trange_processed_arr[f].processed_date.from.type=='number')) ","\t\t\t\t\t{","\t\t\t\t\t\tsplit_pos = dates_count+1;","\t\t\t\t\t}","\t\t\t\t\t\t","\t\t\t\t}","\t\t\t\telse if(range_processed_arr[f].object_type=='range') {","\t\t\t\t\t//find the arm with most info, process that first","\t\t\t\t\t//new plan, make both arms the same length, ie. add larger period types from one arm to the other","\t\t\t\t\tvar longest = range_processed_arr[f].largest_arm;","\t\t\t\t\tvar shortest = range_processed_arr[f].shortest_arm;","\t\t\t\t\tvar shortest_type = range_processed_arr[f].get_largest_type_for_arm(shortest);","\t\t\t\t\tfor(var n=0;n<range_processed_arr[f][longest].length; n++) {","\t\t\t\t\t\tif(Math.floor(range_processed_arr[f][longest][n].largest_type/2)>(shortest_type/2)) {","\t\t\t\t\t\t\tvar shortest_length = range_processed_arr[f][shortest].length;","\t\t\t\t\t\t\trange_processed_arr[f][shortest][shortest_length] = jQuery.extend(true, {}, range_processed_arr[f][longest][n]);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\trange_processed_arr[f].from.sort(sort_by_number);","\t\t\t\t\trange_processed_arr[f].to.sort(sort_by_number);","\t\t\t\t\trange_processed_arr[f].from.sort(sort_by_type);","\t\t\t\t\trange_processed_arr[f].to.sort(sort_by_type);","\t\t\t\t\t","\t\t\t\t\tvar arm = 'from';","\t\t\t\t\tvar tmp_dates = {from:[],to:[]}; //this could also be done a lot nicer","\t\t\t\t\tfor(var n=0;n<dates[dates_count].length; n++) {","\t\t\t\t\t\tvar range_dr = new DateRange();","\t\t\t\t\t\tvar tmp_dates_count = -1;","\t\t\t\t\t\ttmp_dates[arm] = [];","\t\t\t\t\t\ttmp_dates[arm][0] = [dates[dates_count][n]];\t\t\t\t\t\t","\t\t\t\t\t\tfor(var a=0; a<range_processed_arr[f][arm].length; a++) {","\t\t\t\t\t\t\ttmp_dates[arm][a+1] = [];","\t\t\t\t\t\t\tfor(var b=0; b<tmp_dates[arm][a].length; b++) {","\t\t\t\t\t\t\t\tvar this_dr = process_period(range_processed_arr[f][arm][a],tmp_dates[arm][a][b],null,null);","\t\t\t\t\t\t\t\tif(!this_dr.length>0) {","\t\t\t\t\t\t\t\t\tif(this_dr && this_dr.from!=null && this_dr.to!=null && this_dr.from!='Invalid Date' && this_dr.to!='Invalid Date')\t\t\t\ttmp_dates[arm][a+1][b] = this_dr;","\t\t\t\t\t\t\t\t\telse","\t\t\t\t\t\t\t\t\t\ttmp_dates[arm][a+1][b] = null;","\t\t\t\t\t\t\t\t} else {","\t\t\t\t\t\t\t\t\tfor(var j=0;j<this_dr.length;j++) {","\t\t\t\t\t\t\t\t\t\tvar dates_len = tmp_dates[arm][a+1].length;","\t\t\t\t\t\t\t\t\t\ttmp_dates[arm][a+1][dates_len] = this_dr[j];","\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t\t//this_dr.concat(dates[dates_count+1]);","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t\t//get the date","\t\t\t\t\t\t//var working_date = tmp_dates[tmp_dates.length-1][0].from;","\t\t\t\t\t\t//range_dr[arm] = working_date;","\t\t\t\t\t\t//do it all again for the other arm","\t\t\t\t\t\tarm = 'to';","\t\t\t\t\t\ttmp_dates[arm][0] = [dates[dates_count][n]];\t\t\t\t\t\t","\t\t\t\t\t\tfor(var a=0; a<range_processed_arr[f][arm].length; a++) {","\t\t\t\t\t\t\ttmp_dates[arm][a+1] = [];","\t\t\t\t\t\t\tfor(var b=0; b<tmp_dates[arm][a].length; b++) {","\t\t\t\t\t\t\t\tvar this_dr = process_period(range_processed_arr[f][arm][a],tmp_dates[arm][a][b],null,null);","\t\t\t\t\t\t\t\tif(!this_dr.length>0) {","\t\t\t\t\t\t\t\t\tif(this_dr && this_dr.from!=null && this_dr.to!=null && this_dr.from!='Invalid Date' && this_dr.to!='Invalid Date')\t\t\t\ttmp_dates[arm][a+1][b] = this_dr;","\t\t\t\t\t\t\t\t\telse","\t\t\t\t\t\t\t\t\t\ttmp_dates[arm][a+1][b] = null;","\t\t\t\t\t\t\t\t} else {","\t\t\t\t\t\t\t\t\tfor(var j=0;j<this_dr.length;j++) {","\t\t\t\t\t\t\t\t\t\tvar dates_len = tmp_dates[arm][a+1].length;","\t\t\t\t\t\t\t\t\t\ttmp_dates[arm][a+1][dates_len] = this_dr[j];","\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t\t//this_dr.concat(dates[dates_count+1]);","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t\tvar no_froms = tmp_dates.from.length - 1;","\t\t\t\t\t\tvar no_tos = tmp_dates.to.length - 1;","\t\t\t\t\t\tfor(var a=0; a<tmp_dates.from[no_froms].length; a++) {","\t\t\t\t\t\t\tif(tmp_dates.from[no_froms][a]!=null&&tmp_dates.to[no_tos][a]!=null) {","\t\t\t\t\t\t\t\tvar range_dr = new DateRange();","\t\t\t\t\t\t\t\trange_dr.from = tmp_dates.from[no_froms][a].from;","\t\t\t\t\t\t\t\tif(!INCLUSIVE)","\t\t\t\t\t\t\t\t\trange_dr.to = tmp_dates.to[no_tos][a].from;","\t\t\t\t\t\t\t\telse","\t\t\t\t\t\t\t\t\trange_dr.to = tmp_dates.to[no_tos][a].to;","\t\t\t\t\t\t\t\tvar dates_len = dates[dates_count+1].length;","\t\t\t\t\t\t\t\tdates[dates_count+1][dates_len] = range_dr;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\tif(split_pos==-1) split_pos = dates.length-1;","","\t\tvar json = \"{text:'\" + last_text.replace(\"'\",\" \") + \"',dates:[\";","        var out = {text:last_text.replace(\"'\",\"\"), dates:[]};","\t\t$.each(dates[dates.length-1],function(i) {","\t\t\tif(this.from>this.to) {","\t\t\t\tvar tmpdate = this.from;","\t\t\t\tthis.from = this.to;","\t\t\t\tthis.to = tmpdate;","\t\t\t}","\t\t\tif(i>0) json += \",\";","\t\t\tvar year = this.from.getFullYear();","\t\t\tvar month = this.from.getMonth() + 1;","\t\t\tvar date = this.from.getDate();","\t\t\tvar hours = this.from.getHours();","\t\t\tvar minutes = this.from.getMinutes();","\t\t\tif(minutes<10) minutes = \"0\" + minutes;","\t\t\tjson += \"{from:'\" + year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \"',\";","            ","\t\t\tyear = this.to.getFullYear();","\t\t\tmonth = this.to.getMonth() + 1;","\t\t\tdate = this.to.getDate();","\t\t\thours = this.to.getHours();","\t\t\tminutes = this.to.getMinutes();","\t\t\tif(minutes<10) minutes = \"0\" + minutes;","\t\t\tif(hours<10) hours = \"0\" + hours;","\t\t\tjson += \"to:'\" + year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \"'}\";","            ","            out.dates.push({from:this.from,to:this.to});","\t\t});","\t\tjson += \"]\";","\t\tif(split_pos!=dates.length-1) {","\t\t\tjson += \",split_dates:[\";","            out.splitDates = [];","\t\t\t$.each(dates[split_pos],function(i) {","\t\t\t\tif(this.from>this.to) {","\t\t\t\t\tvar tmpdate = this.from;","\t\t\t\t\tthis.from = this.to;","\t\t\t\t\tthis.to = tmpdate;","\t\t\t\t}","\t\t\t\tif(i>0) json += \",\";","\t\t\t\tvar year = this.from.getFullYear();","\t\t\t\tvar month = this.from.getMonth() + 1;","\t\t\t\tvar date = this.from.getDate();","\t\t\t\tvar hours = this.from.getHours();","\t\t\t\tvar minutes = this.from.getMinutes();","\t\t\t\tif(minutes<10) minutes = \"0\" + minutes;","\t\t\t\tjson += \"{from:'\" + year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \"',\";","\t\t\t\tyear = this.to.getFullYear();","\t\t\t\tmonth = this.to.getMonth() + 1;","\t\t\t\tdate = this.to.getDate();","\t\t\t\thours = this.to.getHours();","\t\t\t\tminutes = this.to.getMinutes();","\t\t\t\tif(minutes<10) minutes = \"0\" + minutes;","\t\t\t\tif(hours<10) hours = \"0\" + hours;","\t\t\t\tjson += \"to:'\" + year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \"'}\";","                ","                out.splitDates.push({from:this.from,to:this.to});","\t\t\t});","\t\t\tjson += \"]\";","\t\t}","\t\tjson += \"}\";","\t\t","/*\t\tvar outtext = \"\";","\t\touttext += \"<h3>\" + range_processed_arr.length + \"</h3><div id=\\\"u1\\\">\";","\t\touttext += \"</div><div id=\\\"u3\\\"><h4>date processed</h4>\";","\t\t","\t\t$.each(dates[split_pos],function() {","\t\t\touttext += \"<br />\" + (this.from + \"\").replace(/ GMT.*$/,\"\") + \" - \" + (this.to+\"\").replace(/ GMT.*$/,\"\");","\t\t});","\t\touttext += \"</div><div id=\\\"u3\\\"><h4>period processed</h4>\";","\t\t$.each(period_processed_arr,function(){","\t\t\tif(this.word) {","\t\t\t\touttext += \"<br />{word:'\" + this.word + \"',type:'\" + this.type + \"'}\";","\t\t\t}","\t\t\telse {","\t\t\t\tif(typeof(this)=='object'&&this.object_type&&this.object_type=='period'){","\t\t\t\t\t\t\touttext += \"<br>{period:\";","\t\t\t\t\t\t\tif(this.period_specifier) outtext += \"<br>period_specifier:\" + this.period_specifier;","\t\t\t\t\t\t\tif(this.period_type) outtext += \"<br>,period_type:\" + this.period_type;","\t\t\t\t\t\t\tif(this.processed_date) outtext += \"<br>,processed_date.from.value:\" + this.processed_date.from.value;","\t\t\t\t\t\t\tif(this.processed_date) outtext += \"<br>,processed_date.from.type:\" + this.processed_date.from.type;","\t\t\t\t\t\t\tif(this.processed_date&&this.processed_date.to) outtext += \"<br>,processed_date.to.value:\" + this.processed_date.to.value;","\t\t\t\t\t\t\tif(this.processed_date&&this.processed_date.to) outtext += \"<br>,processed_date.to.type:\" + this.processed_date.to.type;","\t\t\t\t\t\t\tif(this.period_modifier) outtext += \"<br>,period_modifier:\" + this.period_modifier;","\t\t\t\t\t\t\tif(this.n_value) outtext += \"<br>,n_value:\" + this.n_value;","\t\t\t\t\t\t\tif(this.starting_specifier) outtext += \"<br>,starting_specifier:\" + this.starting_specifier;","\t\t\t\t\t\t\tif(this.starting_type) outtext += \"<br>,starting_type:\" + this.starting_type;","\t\t\t\t\t\t\tif(this.starting_date) outtext += \"<br>,starting_date.from.value:\" + this.starting_date.from.value;","\t\t\t\t\t\t\tif(this.starting_date) outtext += \"<br>,starting_date.from.type:\" + this.starting_date.from.type;","\t\t\t\t\t\t\tif(this.starting_date&&this.starting_date.to) outtext += \"<br>,starting_date.to.value:\" + this.starting_date.to.value;","\t\t\t\t\t\t\tif(this.starting_date&&this.starting_date.to) outtext += \"<br>,starting_date.to.type:\" + this.starting_date.to.type;","\t\t\t\t\t\t\t","\t\t\t\t\t\t\tif(this.starting_modifier) outtext += \"<br>,starting_modifier:\" + this.starting_modifier;","\t\t\t\t\touttext += \"}\";","\t\t\t\t}","\t\t\t}","","\t\t});","\t\touttext += \"</div><div id=\\\"u3\\\"><h4>word processed</h4>\";","\t\t$.each(date_processed_arr,function(){","\t\t\t\touttext += \"<br />{word:'\" + this.word + \"',type:'\" + this.type + \"'}\";","\t\t});","\t\touttext += \"</div><div id=\\\"u2\\\"><h4>words extracted</h4>\";","\t\t$.each(outarr,function(){","\t\t\touttext += \"<br />{word:'\" + this.word + \"',type:'\" + this.type + \"'}\";","\t\t});","\t\touttext += \"</div>\";","\t\t$('#output').html(outtext);","\t*/","        if(out.dates && out.dates.length > 0) {","\t\t  return out.dates[0].from;","        }","        else {","            return null;   ","        }","\t}","\tvar dates; //REMEMBER TO MOVE THIS BACK INDOORS WHERE IT BELONGS!!!!!!","\tfunction process_period(period,current_range,other_date,range_part) {","\t\tif(current_range==null) return {from:null,to:null};","\t\tif(range_part!=null) {","\t\t\tcurrent_range = {from:range_part,to:range_part};","\t\t}","\t\tif(current_range.to<current_range.from) {","\t\t\tvar tmp = current_range.to;","\t\t\tcurrent_range.to = current_range.from","\t\t\tcurrent_range.from = tmp;","\t\t}","\t\tvar dr = new DateRange();","\t\tvar out_arr = []; //for range use","\t\tvar period_type = null;","\t\tperiod_type = type_order[Math.floor(period.largest_type/2)].value;","\t\tvar period_length = 1;","\t\tvar n_value = parseInt(period.n_value);","\t\tif(period.processed_date && period.processed_date.from.type=='number') {","\t\t\tperiod_length = parseInt(period.processed_date.from.value);","\t\t}","\t\tif(period.needs_start()==false) current_range = {from:new Date(),to:new Date()};","\t\tswitch(period_type) {","\t\t\tcase \"year\":","\t\t\t\tvar first_date = new Date(current_range.from.getFullYear(),0,1);\t//get first occurance of a year in this period\t\t\t\t","\t\t\t\tvar last_date = new Date(current_range.to.getFullYear(),0,1);","\t\t\t\twhile(last_date>=current_range.to) {","\t\t\t\t\tlast_date = new Date(last_date.getFullYear()-1,0,1);","\t\t\t\t}","\t\t\t\tif(period.is_range()==false && period.processed_date && (period.processed_date.from.type=='year' || (period.period_specifier==null && period.processed_date.from.type=='number'))) {","\t\t\t\t\t","\t\t\t\t\tvar year = parseInt(period.processed_date.from.value);","\t\t\t\t\tif(year<50) year += 2000;","\t\t\t\t\telse if(year<100) year += 1900;","\t\t\t\t\tdr.from = new Date(year,0,1);","\t\t\t\t\tdr.to = new Date(year+1,0,1);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t","\t\t\t\t\tswitch(period.period_specifier) {","\t\t\t\t\t\tcase \"this\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = first_date;","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear()+period_length,0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"last\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.to = last_date;","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear() - period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"next\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear()+1,0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(last_date.getFullYear() + 1 + period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"nth\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear() + (period_length * (n_value-1)),0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear() + (period_length * n_value),0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"every\":","\t\t\t\t\t\tcase null:","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\twhile(first_date<=last_date) {","\t\t\t\t\t\t\t\t\tvar tr = new DateRange();","\t\t\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate());","\t\t\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear()+period_length,first_date.getMonth(),first_date.getDate());","\t\t\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear()+period_length,first_date.getMonth(),first_date.getDate());","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}\t\t\t\t\t\t\t","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","","\t\t\t\t//if it's a simple range get the dates","\t\t\t\t//if processed_date.from.type=='year' then get the dates for that year","\t\t\t\t//now start looking at the period specifier","\t\t\t\tbreak;","\t\t\tcase \"month\":","\t\t\t\tvar first_date = new Date(current_range.from.getFullYear(),current_range.from.getMonth(),1);\t//get first occurance of a year in this period","\t\t\t\t","\t\t\t\tvar last_date = new Date(current_range.to.getFullYear(),current_range.to.getMonth(),1);","\t\t\t\t/*while(last_date>=current_range.to) {","\t\t\t\t\tlast_date = new Date(last_date.getFullYear(),last_date.getMonth()-1,1);","\t\t\t\t}*/","\t\t\t\tif((period.is_range()==false && period.processed_date && period.processed_date.from.type=='month')","\t\t\t\t\t||(period.period_type=='month' && period.period_specifier==null && period.processed_date && period.processed_date.from.type=='number')) {","\t\t\t\t\t","\t\t\t\t\tvar month = parseInt(period.processed_date.from.value);","\t\t\t\t\tmonth--;","\t\t\t\t\tif(month<12) {","\t\t\t\t\t\tif(current_range.from==current_range.to) { //this could be done more elegantly, given some fucking time","\t\t\t\t\t\t\tvar tr = new DateRange();","\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),month,1);","\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear(),month+1,1);","\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear()+1,month,1);","\t\t\t\t\t\t}","\t\t\t\t\t\telse {","\t\t\t\t\t\t\twhile(first_date<last_date) {","\t\t\t\t\t\t\t\tvar tr = new DateRange();","\t\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),month,1);","\t\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear(),month+1,1);","\t\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear()+1,month,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t","\t\t\t\t\tswitch(period.period_specifier) {","\t\t\t\t\t\tcase \"this\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = first_date;","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth()+period_length,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"last\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.to = last_date;","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear(),last_date.getMonth() - period_length,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"next\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear(),last_date.getMonth()+1,1);","\t\t\t\t\t\t\t\tdr.to = new Date(last_date.getFullYear(), last_date.getMonth() + 1 + period_length,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"nth\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear(), first_date.getMonth() + (period_length * (n_value-1)),1);","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth() + (period_length * n_value),1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"every\":","\t\t\t\t\t\tcase null:","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\twhile(first_date<last_date) {","\t\t\t\t\t\t\t\t\tvar tr = new DateRange();","\t\t\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate());","\t\t\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear(),first_date.getMonth()+period_length,first_date.getDate());","\t\t\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth()+period_length,first_date.getDate());","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\t","\t\t\t\t//if it's a simple range get the dates","\t\t\t\t//if processed_date.from.type=='year' then get the dates for that year","\t\t\t\t//now start looking at the period specifier","\t\t\t\tbreak;","\t\t\tcase \"week\":","\t\t\t\tvar first_date = new Date(current_range.from.getFullYear(),current_range.from.getMonth(),current_range.from.getDate());\t//get first occurance of a year in this period","\t\t\t\twhile(first_date.getDay()!=week_start_day) {","\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()-1);","\t\t\t\t}","\t\t\t\tvar last_date;","\t\t\t\tif(current_range.from==current_range.to)","\t\t\t\t\tlast_date = first_date;","\t\t\t\telse","\t\t\t\t\tlast_date = new Date(current_range.to.getFullYear(),current_range.to.getMonth(),current_range.to.getDate()-1);","\t\t\t\twhile(last_date.getDay()!=week_start_day) {","\t\t\t\t\tlast_date = new Date(last_date.getFullYear(),last_date.getMonth(),last_date.getDate()+1);","\t\t\t\t}","\t\t\t\tif(","\t\t\t\t\t(period.is_range()==false && period.processed_date && period.processed_date.from.type=='week') ||","\t\t\t\t\t(period.period_specifier==null && period.processed_date!=null && period.processed_date.from.type=='number')","\t\t\t\t) {","\t\t\t\t\t","\t\t\t\t\tvar week = parseInt(period.processed_date.from.value);","\t\t\t\t\tif(current_range.from==current_range.to) {","\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + ((week-1)*7));","\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + ((week)*7));","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\twhile(first_date<last_date) {","\t\t\t\t\t\t\tvar tr =new DateRange();","\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + ((week-1)*7));","\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + ((week)*7));","\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + 7);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t","\t\t\t\t\tswitch(period.period_specifier) {","\t\t\t\t\t\tcase \"this\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = first_date;","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + (7*period_length));","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"last\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.to = last_date;","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear(),last_date.getMonth(),last_date.getDate() - (7*period_length));","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"next\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear(),last_date.getMonth(),last_date.getDate() + (7*period_length));","\t\t\t\t\t\t\t\tdr.to = new Date(last_date.getFullYear(),last_date.getMonth(),last_date.getDate() + (7*(period_length+1)));","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"nth\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + ((period_length*7) * (n_value-1)));","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + ((period_length*7) * (n_value)));","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"every\":","\t\t\t\t\t\tcase null:","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\twhile(first_date<last_date) {","\t\t\t\t\t\t\t\t\tvar tr = new DateRange();","\t\t\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate());","\t\t\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+(7 * period_length));","\t\t\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+(7*period_length));","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","","\t\t\t\t//if it's a simple range get the dates","\t\t\t\t//if processed_date.from.type=='year' then get the dates for that year","\t\t\t\t//now start looking at the period specifier","\t\t\t\tbreak;","\t\t\tcase \"day_name\":","\t\t\t\t//TODO, if from and to are the same then pass it this week's dates","\t\t\t\tif(current_range.from==current_range.to) {","\t\t\t\t\twhile(current_range.from.getDay()!=week_start_day) {","\t\t\t\t\t\tcurrent_range.from = new Date(current_range.from.getFullYear(),current_range.from.getMonth(),current_range.from.getDate()-1);","\t\t\t\t\t}","\t\t\t\t\twhile(current_range.to.getDay()!=week_start_day) {","\t\t\t\t\t\tcurrent_range.to = new Date(current_range.to.getFullYear(),current_range.to.getMonth(),current_range.to.getDate()+1);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tvar day_name = 0;","\t\t\t\tif(period.is_range()==false && period.processed_date && period.processed_date.from.type=='day_name') {","\t\t\t\t\tday_name = parseInt(period.processed_date.from.value);","\t\t\t\t\tif(day_name>6) day_name-=7;","\t\t\t\t}","\t\t\t\tvar first_date = new Date(current_range.from.getFullYear(),current_range.from.getMonth(),current_range.from.getDate());","\t\t\t\t//go to the first sunday in the period then ","\t\t\t\twhile(first_date.getDay()!=0)","\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()-1);","\t\t\t\twhile(first_date.getDay()!=day_name)","\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+1);","\t\t\t\tvar last_date = new Date(current_range.to.getFullYear(),current_range.to.getMonth(),current_range.to.getDate()-1);","\t\t\t\twhile(last_date.getDay()!=day_name)","\t\t\t\t\tlast_date = new Date(last_date.getFullYear(),last_date.getMonth(),last_date.getDate()-1);","\t\t\t\tswitch(period.period_specifier) {","\t\t\t\t\tcase \"this\":","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\tdr.from = first_date;","\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + 1);","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase \"last\":","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\tdr.from = last_date;","\t\t\t\t\t\t\tdr.to = new Date(last_date.getFullYear(),last_date.getMonth(),last_date.getDate() + 1);","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase \"next\":","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear(),last_date.getMonth(),last_date.getDate() + 7);","\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + 8);","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase \"nth\":","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + (7 * (n_value-1)));","\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + (7 * (n_value-1)) + 1);","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase \"every\":","\t\t\t\t\tcase null:","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\twhile(first_date<=last_date) {","\t\t\t\t\t\t\t\tif(first_date>=current_range.from&&first_date<current_range.to) {","\t\t\t\t\t\t\t\t\tvar tr = new DateRange();","\t\t\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate());","\t\t\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+1);","\t\t\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+(7 * period_length));","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\t","\t\t\t","\t\t\t\t//if it's a simple range get the dates","\t\t\t\t//if processed_date.from.type=='year' then get the dates for that year","\t\t\t\t//now start looking at the period specifier","\t\t\t\tbreak;","\t\t\tcase \"day\":","\t\t","\t\t\t\tvar first_date = new Date(current_range.from.getFullYear(),current_range.from.getMonth(),current_range.from.getDate());\t//get first occurance of a year in this period","\t\t\t\t","\t\t\t\tvar last_date = new Date(current_range.to.getFullYear(),current_range.to.getMonth(),current_range.to.getDate());","\t\t","\t\t\t\tif(period.is_range()==false && period.processed_date && ((period.processed_date.from.type=='number' && period.period_specifier==null)","\t\t\t\t\t||(period.processed_date.from.type=='day' && period.period_specifier==null))) {","\t\t\t\t\tvar day = parseInt(period.processed_date.from.value);","\t\t\t\t\tif(current_range.from==current_range.to) {","\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+day-1);","\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+day);","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\twhile(first_date<last_date) {","\t\t\t\t\t\t\tvar tr =new DateRange();","\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+day-1);","\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+day);","\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth()+1,first_date.getDate());","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t","\t\t\t\t\tswitch(period.period_specifier) {","\t\t\t\t\tcase \"this\":","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\tdr.from = first_date;","\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + period_length);","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase \"last\":","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\tdr.to = last_date;","\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear(),last_date.getMonth(),last_date.getDate() - period_length);","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase \"next\":","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear(),last_date.getMonth(),last_date.getDate() + 1);","\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + 1 + period_length);","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase \"nth\":","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + (period_length * (n_value-1)));","\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + (period_length * (n_value)));","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase \"every\":","\t\t\t\t\tcase null:","\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\twhile(first_date<last_date) {","\t\t\t\t\t\t\t\t\tvar tr = new DateRange();","\t\t\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate());","\t\t\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+period_length);","\t\t\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate()+period_length);","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\t","\t\t\t\t//if it's a simple range get the dates","\t\t\t\t//if processed_date.from.type=='year' then get the dates for that year","\t\t\t\t//now start looking at the period specifier","\t\t\t\tbreak;","\t\t\tcase \"time\":","\t\t\t\t","\t\t\t\tvar first_date = new Date(current_range.from.getFullYear(),current_range.from.getMonth(),current_range.from.getDate());\t//get first occurance of a year in this period","\t\t\t\t","\t\t\t\tvar last_date = new Date(current_range.to.getFullYear(),current_range.to.getMonth(),current_range.to.getDate());","\t\t\t\t","\t\t\t\tif(period.is_range()==false && period.processed_date && period.processed_date.from.type=='time') {","\t\t\t\t\tperiod.processed_date.from.value = period.processed_date.from.value.toString();","\t\t\t\t\tvar timemat = period.processed_date.from.value.match(/([0-9]+):([0-9]+)/);","\t\t\t\t\tif(timemat!=null) {","\t\t\t\t\t\tvar hours = parseInt(timemat[1]);","\t\t\t\t\t\tvar mins = parseInt(timemat[2]);","\t\t\t\t\t\tvar to_hours = hours;","\t\t\t\t\t\tvar to_mins = mins;","\t\t\t\t\t\tif(mins==0)","\t\t\t\t\t\t\tto_hours = hours+1;","\t\t\t\t\t\telse","\t\t\t\t\t\t\tto_mins = mins + 1;","\t\t\t\t\t\tif(current_range.from==current_range.to) {","\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate(),hours,mins);","\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate(),to_hours,to_mins);","\t\t\t\t\t\t}","\t\t\t\t\t\telse {","\t\t\t\t\t\t\twhile(first_date<last_date) {","\t\t\t\t\t\t\t\tvar tr =new DateRange();","\t\t\t\t\t\t\t\ttr.from = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate(),hours,mins);","\t\t\t\t\t\t\t\ttr.to = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate(),to_hours,to_mins);","\t\t\t\t\t\t\t\tout_arr[out_arr.length] = tr;","\t\t\t\t\t\t\t\tfirst_date = new Date(first_date.getFullYear(),first_date.getMonth(),first_date.getDate() + 1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t","\t\t\t\t\tswitch(period.period_specifier) {","\t\t\t\t\t\tcase \"this\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = first_date;","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear()+period_length,0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"last\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.to = last_date;","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear() - period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"next\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear()+1,0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(last_date.getFullYear() + 1 + period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"nth\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear() + (period_length * (n_value-1)),0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear() + (period_length * n_value),0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"every\":","\t\t\t\t\t\tcase \"\":","","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","","\t\t\t\t//if it's a simple range get the dates","\t\t\t\t//if processed_date.from.type=='year' then get the dates for that year","\t\t\t\t//now start looking at the period specifier","\t\t\t\tbreak;","\t\t\tcase \"hour\":","\t\t\t\tvar first_date = new Date(current_range.from.getFullYear(),0,1);\t//get first occurance of a year in this period","\t\t\t\t","\t\t\t\tvar last_date = new Date(current_range.to.getFullYear(),0,1);","\t\t\t\twhile(last_date>=current_range.to) {","\t\t\t\t\tlast_date = new Date(last_date.getFullYear()-1,0,1);","\t\t\t\t}","\t\t\t\tif(period.is_range()==false && period.processed_date && period.processed_date.from.type=='time') {","\t\t\t\t\t","\t\t\t\t\tvar year = parseInt(period.processed_date.from.value);","\t\t\t\t\tif(year<50) year += 2000;","\t\t\t\t\telse if(year<100) year += 1900;","\t\t\t\t\tdr.from = new Date(year,0,1);","\t\t\t\t\tdr.to = new Date(year+1,0,1);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t","\t\t\t\t\tswitch(period.period_specifier) {","\t\t\t\t\t\tcase \"this\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = first_date;","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear()+period_length,0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"last\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.to = last_date;","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear() - period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"next\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear()+1,0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(last_date.getFullYear() + 1 + period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"nth\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear() + (period_length * (n_value-1)),0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear() + (period_length * n_value),0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"every\":","\t\t\t\t\t\tcase \"\":","","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","","\t\t\t\t//if it's a simple range get the dates","\t\t\t\t//if processed_date.from.type=='year' then get the dates for that year","\t\t\t\t//now start looking at the period specifier","\t\t\t\tbreak;","\t\t\tcase \"minute\":","\t\t\t\tvar dr = new DateRange();","\t\t\t\tvar from = []; //for range use","\t\t\t\tvar to = []; //ditto","\t\t\t\tvar period_length = 1;","\t\t\t\tvar n_value = parseInt(period.n_value);","\t\t\t\tif(period.processed_date && period.processed_date.from.type=='number') {","\t\t\t\t\tperiod_length = parseInt(period.processed_date.from.value);","\t\t\t\t}","\t\t\t\tvar first_date = new Date(current_range.from.getFullYear(),0,1);\t//get first occurance of a year in this period","\t\t\t\t","\t\t\t\tvar last_date = new Date(current_range.to.getFullYear(),0,1);","\t\t\t\twhile(last_date>=current_range.to) {","\t\t\t\t\tlast_date = new Date(last_date.getFullYear()-1,0,1);","\t\t\t\t}","\t\t\t\tif(period.is_range()==false && period.processed_date && period.processed_date.from.type=='year') {","\t\t\t\t\t","\t\t\t\t\tvar year = parseInt(period.processed_date.from.value);","\t\t\t\t\tif(year<50) year += 2000;","\t\t\t\t\telse if(year<100) year += 1900;","\t\t\t\t\tdr.from = new Date(year,0,1);","\t\t\t\t\tdr.to = new Date(year+1,0,1);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t","\t\t\t\t\tswitch(period.period_specifier) {","\t\t\t\t\t\tcase \"this\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = first_date;","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear()+period_length,0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"last\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.to = last_date;","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear() - period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"next\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear()+1,0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(last_date.getFullYear() + 1 + period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"nth\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear() + (period_length * (n_value-1)),0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear() + (period_length * n_value),0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"every\":","\t\t\t\t\t\tcase \"\":","","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\t}","","","\t\t\t\t//if it's a simple range get the dates","\t\t\t\t//if processed_date.from.type=='year' then get the dates for that year","\t\t\t\t//now start looking at the period specifier","\t\t\t\tbreak;","\t\t\tcase \"second\":","\t\t\t\tvar dr = new DateRange();","\t\t\t\tvar from = []; //for range use","\t\t\t\tvar to = []; //ditto","\t\t\t\tvar period_length = 1;","\t\t\t\tvar n_value = parseInt(period.n_value);","\t\t\t\tif(period.processed_date && period.processed_date.from.type=='number') {","\t\t\t\t\tperiod_length = parseInt(period.processed_date.from.value);","\t\t\t\t}","\t\t\t\tvar first_date = new Date(current_range.from.getFullYear(),0,1);\t//get first occurance of a year in this period","\t\t\t\t","\t\t\t\tvar last_date = new Date(current_range.to.getFullYear(),0,1);","\t\t\t\twhile(last_date>=current_range.to) {","\t\t\t\t\tlast_date = new Date(last_date.getFullYear()-1,0,1);","\t\t\t\t}","\t\t\t\tif(period.is_range()==false && period.processed_date && period.processed_date.from.type=='year') {","\t\t\t\t\t","\t\t\t\t\tvar year = parseInt(period.processed_date.from.value);","\t\t\t\t\tif(year<50) year += 2000;","\t\t\t\t\telse if(year<100) year += 1900;","\t\t\t\t\tdr.from = new Date(year,0,1);","\t\t\t\t\tdr.to = new Date(year+1,0,1);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t","\t\t\t\t\tswitch(period.period_specifier) {","\t\t\t\t\t\tcase \"this\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = first_date;","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear()+period_length,0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"last\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.to = last_date;","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear() - period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"next\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(last_date.getFullYear()+1,0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(last_date.getFullYear() + 1 + period_length, 0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"nth\":","\t\t\t\t\t\t\tif(current_range) {","\t\t\t\t\t\t\t\tdr.from = new Date(first_date.getFullYear() + (period_length * (n_value-1)),0,1);","\t\t\t\t\t\t\t\tdr.to = new Date(first_date.getFullYear() + (period_length * n_value),0,1);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase \"every\":","\t\t\t\t\t\tcase \"\":","","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","","\t\t\t\t//if it's a simple range get the dates","\t\t\t\t//if processed_date.from.type=='year' then get the dates for that year","\t\t\t\t//now start looking at the period specifier","\t\t\t\tbreak;","","\t\t}","\t\tif(out_arr.length>0 && (dr.from==null && dr.to==null)) return out_arr;","\t\telse return dr;","\t}","\tfunction split_complex_types(complex_type,splice_arr,add_arr,f,period,arm) {","\t\tswitch(complex_type.type) {","\t\tcase \"full_date\":","\t\t\tvar bit_match = complex_type.value.match(/^([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]*([0-9:]*)/);","\t\t\tif(bit_match!=null) {","\t\t\t\tvar day_period = new Period();","\t\t\t\tday_period.period_type = 'day';","\t\t\t\tday_period.processed_date = {from:{value:bit_match[3],type:'number'}};","\t\t\t\tvar month_period = new Period();","\t\t\t\tmonth_period.period_type = 'month';","\t\t\t\tmonth_period.processed_date = {from:{value:bit_match[2],type:'number'}};","\t\t\t\tvar year_period = new Period();","\t\t\t\tyear_period.processed_date = {from:{value:bit_match[1],type:'year'}};","\t\t\t\tvar time_period = null;","\t\t\t\tif(bit_match[4]!=\"\") {","\t\t\t\t\ttime_period = new Period();","\t\t\t\t\ttime_period.period_type = 'time';","\t\t\t\t\ttime_period.processed_date = {from:{value:bit_match[4],type:'time'}};","\t\t\t\t}","\t\t\t\tif(add_arr!=null) {","\t\t\t\t\tif(time_period!=null)","\t\t\t\t\t\tadd_arr.splice(0,0,day_period,month_period,year_period,time_period);","\t\t\t\t\telse","\t\t\t\t\t\tadd_arr.splice(0,0,day_period,month_period,year_period);","\t\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1);","\t\t\t\t}","\t\t\t\telse if(splice_arr!=null) ","\t\t\t\t\tif(time_period!=null)","\t\t\t\t\t\tsplice_arr.splice(f,1,day_period,month_period,year_period,time_period);","\t\t\t\t\telse","\t\t\t\t\t\tsplice_arr.splice(f,1,day_period,month_period,year_period);","\t\t\t\t","\t\t\t}","\t\t\tbreak;","\t\tcase \"day_name_month\":","\t\t\tvar bit_match = complex_type.value.match(/^([0-9]+)[^0-9]+([0-9]+)/);","\t\t\tif(bit_match!=null) {","\t\t\t\tvar bit_period = new Period();","\t\t\t\tbit_period.period_type = 'day_name';","\t\t\t\tbit_period.processed_date = {from:{value:bit_match[1],type:'number'}};","\t\t\t\tvar month_period = new Period();","\t\t\t\tmonth_period.period_type = 'month';","\t\t\t\tmonth_period.processed_date = {from:{value:bit_match[2],type:'number'}};","\t\t\t\tif(add_arr!=null) {","\t\t\t\t\tadd_arr.splice(0,0,bit_period,month_period);","\t\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1);","\t\t\t\t}","\t\t\t\telse if(splice_arr!=null) splice_arr.splice(f,1,bit_period,month_period);","\t\t\t\t","\t\t\t}","\t\t\tbreak;","\t\tcase \"day_month\":","\t\t\tvar bit_match = complex_type.value.match(/^([0-9]+)[^0-9]+([0-9]+)/);","\t\t\tif(bit_match!=null) {","\t\t\t\tvar bit_period = new Period();","\t\t\t\tbit_period.period_type = 'day';","\t\t\t\tbit_period.processed_date = {from:{value:bit_match[1],type:'number'}};","\t\t\t\tvar month_period = new Period();","\t\t\t\tmonth_period.period_type = 'month';","\t\t\t\tmonth_period.processed_date = {from:{value:bit_match[2],type:'number'}};","\t\t\t\tif(add_arr!=null) {","\t\t\t\t\tadd_arr.splice(0,0,bit_period,month_period);","\t\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1);","\t\t\t\t}","\t\t\t\telse ","\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1,bit_period,month_period);","\t\t\t\t","\t\t\t}","\t\t\tbreak;","\t\tcase \"day_name_month_year\":","\t\t\tvar bit_match = complex_type.value.match(/^([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/);","\t\t\tif(bit_match!=null) {","\t\t\t\tvar bit_period = new Period();","\t\t\t\tbit_period.period_type = 'day_name';","\t\t\t\tbit_period.processed_date = {from:{value:bit_match[1],type:'number'}};","\t\t\t\tvar month_period = new Period();","\t\t\t\tmonth_period.period_type = 'month';","\t\t\t\tmonth_period.processed_date = {from:{value:bit_match[2],type:'number'}};","\t\t\t\tvar year_period = new Period();","\t\t\t\tyear_period.processed_date = {from:{value:bit_match[3],type:'year'}};","\t\t\t\tif(add_arr!=null) {","\t\t\t\t\tadd_arr.splice(0,0,bit_period,month_period,year_period);","\t\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1);","\t\t\t\t}","\t\t\t\telse ","\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1,bit_period,month_period,year_period);","\t\t\t\t","\t\t\t}","\t\t\tbreak;","\t\tcase \"day_name_year\":","\t\t\tvar bit_match = complex_type.value.match(/^([0-9]+)[^0-9]+([0-9]+)/);","\t\t\tif(bit_match!=null) {","\t\t\t\tvar bit_period = new Period();","\t\t\t\tbit_period.period_type = 'day_name';","\t\t\t\tbit_period.processed_date = {from:{value:bit_match[1],type:'number'}};","\t\t\t\tvar year_period = new Period();","\t\t\t\tyear_period.processed_date = {from:{value:bit_match[2],type:'year'}};","\t\t\t\tif(add_arr!=null) {","\t\t\t\t\tadd_arr.splice(0,0,bit_period,year_period);","\t\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1);","\t\t\t\t}","\t\t\t\telse ","\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1,bit_period,year_period);","\t\t\t\t","\t\t\t}","\t\t\tbreak;","\t\tcase \"month_year\":","\t\t\tvar bit_match = complex_type.value.match(/^([0-9]+)[^0-9]+([0-9]+)/);","\t\t\tif(bit_match!=null) {","\t\t\t\tvar month_period = new Period();","\t\t\t\tmonth_period.period_type = 'month';","\t\t\t\tmonth_period.processed_date = {from:{value:bit_match[1],type:'number'}};","\t\t\t\tvar year_period = new Period();","\t\t\t\tyear_period.processed_date = {from:{value:bit_match[2],type:'year'}};","\t\t\t\tif(add_arr!=null) {","\t\t\t\t\tadd_arr.splice(0,0,month_period,year_period);","\t\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1);","\t\t\t\t}","\t\t\t\telse ","\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1,month_period,year_period);","\t\t\t\t","\t\t\t}","\t\t\tbreak;","\t\tdefault:","\t\t\tif(add_arr!=null) {","\t\t\t\tvar new_period = new Period();","\t\t\t\tnew_period.period_type = period.period_type;//period.processed_date[arm].type;","\t\t\t\tnew_period.processed_date = {from:period.processed_date[arm]};","\t\t\t\tadd_arr.splice(0,0,new_period);","\t\t\t\tif(splice_arr!=null) splice_arr.splice(f,1);","\t\t\t}","\t\t\tbreak;","\t\t}","\t\treturn {splice_arr:splice_arr,add_arr:add_arr};","\t\t//if(splice_arr!=null) return splice_arr;","\t\t//if(add_arr!=null) return add_arr;","\t}","\tfunction get_date_range(period,dates,now_date) {","\t\t//returns all occurances of a date in the region","\t}","\tfunction process_number(period,preferred_type) {","\t\tperiod.get_smallest_type();","\t\tperiod.get_largest_type();","\t\tif(period.object_type &&","\t\t\tperiod.period_type == null &&","\t\t\tperiod.period_specifier == null &&","\t\t\tperiod.processed_date !=null &&","\t\t\tperiod.processed_date.from.type == 'number') {","\t\t\tvar year = parseInt(period.processed_date.from.value);","\t\t\tif(year>1800 && year <4000) {","\t\t\t\tperiod.processed_date.from.value = year;","\t\t\t\tperiod.processed_date.from.type = 'year';","\t\t\t\treturn period;","\t\t\t}","\t\t\tswitch(preferred_type){","\t\t\t\tcase 'time':","\t\t\t\t\tif(year<25) {","\t\t\t\t\t\tperiod.processed_date.from.value = year;","\t\t\t\t\t\tperiod.processed_date.from.type = 'time';","\t\t\t\t\t}","\t\t\t\t\tbreak;","\t\t\t\tcase 'day':","\t\t\t\t\tif(year<32) {","\t\t\t\t\t\tperiod.processed_date.from.value = year;","\t\t\t\t\t\tperiod.processed_date.from.type = 'day';","\t\t\t\t\t}","\t\t\t\t\tbreak;","\t\t\t\tcase 'month':","\t\t\t\t\tif(year<13){","\t\t\t\t\t\tperiod.processed_date.from.value = year;","\t\t\t\t\t\tperiod.processed_date.from.type = 'month';","\t\t\t\t\t}","\t\t\t\t\tbreak;","\t\t\t\tcase 'year':","\t\t\t\t\tif(year<50) year += 2000;","\t\t\t\t\telse if(year<100) year += 1900;","\t\t\t\t\tperiod.processed_date.from.value = year;","\t\t\t\t\tperiod.processed_date.from.type = 'year';","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\treturn period;","\t}","\tfunction send_to_date_processor(thisbit,lastbit,date_processed_arr) {","\t","\t\t//here's the challenge","\t\t//the last few bits in thisbit could be 'special', these should be added to the output array","\t\t//but.... 1st etc is special and may or may not be used in the date, if it isn't used then it should be sent back","\t\t//or should it have been sent in the first place?","\t\tif(thisbit.length>0) {","\t\t\tvar testbit = \"\";","\t\t\tvar thisbit_length = thisbit.length;","\t\t\tif(lastbit=='special') thisbit_length-=1;","\t\t\tif(thisbit_length>0) {","\t\t\t\tfor(var t=0; t<thisbit_length; t++) {","\t\t\t\t\ttestbit += thisbit[t].bit.value;","\t\t\t\t}","\t\t\t\t//document.title = testbit;","\t\t\t\tvar date = interpret_date(testbit,'');","\t\t\t\tif(date.error) {","\t\t\t\t\tfor(var d=0; d<thisbit.length; d++) {","\t\t\t\t\t\tdate_processed_arr[date_processed_arr.length] = thisbit[d].bit;","\t\t\t\t\t}","\t\t\t\t}else {","\t\t\t\t\tif(date.from.value!=null) {","\t\t\t\t\t\tif(!date.to&&date.from.type=='period_specifier_number')","\t\t\t\t\t\t\tdate_processed_arr[date_processed_arr.length] = {word:'st',value:date.from.value,type:date.from.type};","\t\t\t\t\t\telse","\t\t\t\t\t\t\tdate_processed_arr[date_processed_arr.length] = {word:'date',value:date,type:'processed_date'};","\t\t\t\t\t\tif(lastbit=='special') date_processed_arr[date_processed_arr.length] = thisbit[thisbit.length-1].bit;","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\t//couldn't extract anything, send all the bits to the processor seperately","\t\t\t\t\t\t$.each(thisbit,function(){","\t\t\t\t\t\t\tdate = interpret_date(this.bit.value,'');","\t\t\t\t\t\t\tif(date.error||date.from.value==null||isNaN(date.from.value)) date_processed_arr[date_processed_arr.length] = this.bit;","\t\t\t\t\t\t\telse {","\t\t\t\t\t\t\t\tif(!date.to&&date.from.type=='period_specifier_number')","\t\t\t\t\t\t\t\t\tdate_processed_arr[date_processed_arr.length] = {word:'st',value:date.from.value,type:date.from.type};","\t\t\t\t\t\t\t\telse","\t\t\t\t\t\t\t\t\tdate_processed_arr[date_processed_arr.length] = {word:'date',value:date,type:'processed_date'};","\t\t\t\t\t\t\t}","\t\t\t\t\t\t});","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\t","\t\t}","\t\treturn date_processed_arr;","\t}","\tfunction extract_words(text) {","\t\tvar outarr = [];","\t\twhile(text.length>0) {","\t\t\tvar thisout = null;","\t\t\ttext = text.replace(/^\\s+|\\s+$/gi,''); //trim","\t\t\t","\t\t\tif(thisout==null) {","\t\t\t\t//try month names","\t\t\t\tfor (var f=0; f<months.length; f++)","\t\t\t\t{","\t\t\t\t\tvar re = new RegExp(\"^\" + months[f] + \"[a-z]*\", \"i\");","\t\t\t\t\tif(text.match(re)!=null) {","\t\t\t\t\t\tthisout = {word:months[f],value:\" \" + months[f] + \" \",type:'month_name'};","\t\t\t\t\t\ttext = text.replace(re,'');","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\t","\t\t\tif(thisout==null) {","\t\t\t\t//is it a positional number?","\t\t\t\tvar m = text.match(/^([0-9]+)st/i);","\t\t\t\tif(m!=null) {","\t\t\t\t\tthisout = {word:'st',value:\" \" + m[1] + 'st ',type:'period_specifier_number'};","\t\t\t\t\ttext = text.replace(/^[0-9]+st/i,'');","\t\t\t\t}","\t\t\t}","\t\t\tif(thisout==null) {","\t\t\t\t//is it a regular number?","\t\t\t\tvar m = text.match(/^([0-9]+)\\b/i);","\t\t\t\tif(m!=null) {","\t\t\t\t\tthisout = {word:m[1],value:\" \" +m[1]+ \" \",type:'number'};","\t\t\t\t\ttext = text.replace(/^[0-9]+\\b/i,'');","\t\t\t\t}","\t\t\t}","\t\t\tif(thisout==null){","\t\t\t\tfor (var f=0; f<word_list.length; f++)","\t\t\t\t{","\t\t\t\t\tvar re = new RegExp(\"^\" + word_list[f].word, \"i\");","\t\t\t\t\tif(text.match(re)!=null) {","\t\t\t\t\t\tif(word_list[f].type!='ignore') thisout = word_list[f];","\t\t\t\t\t\telse thisout = 'ignore';","\t\t\t\t\t\ttext = text.replace(re,'');","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tif(thisout==null) {","\t\t\t\t//try day names","\t\t\t\tfor (var f=0; f<days.length; f++)","\t\t\t\t{","\t\t\t\t\tvar re = new RegExp(\"^\" + days[f] + \"[a-z]*\", \"i\");","\t\t\t\t\tif(text.match(re)!=null) {","\t\t\t\t\t\tthisout = {word:days[f],value:\" \" + days[f] + \" \",type:'day_name'};","\t\t\t\t\t\ttext = text.replace(re,'');","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tif(thisout==null) {","\t\t\t\t//is it a more complex thing?","\t\t\t\tvar m = text.match(/^(\\S+)/i);","\t\t\t\tif(m!=null) {","\t\t\t\t\tthisout = {word:m[1],value:\" \" + m[1] + \" \",type:'unknown'};","\t\t\t\t\ttext = text.replace(/^\\S+/i,'');","\t\t\t\t}","\t\t\t}","\t\t\tif(thisout!=null) {","\t\t\t\tif(thisout!='ignore') outarr[outarr.length] = thisout;","\t\t\t}","\t\t\telse {","\t\t\t\talert('aaaarrrgh null');","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\treturn outarr;","\t}","\tfunction better_split(text) {","\t\ttext = text.replace(/([0-9]+)([a-z]+)/gi,'$1 $2') // split words and numbers","\t\ttext = text.replace(/([a-z]+)([0-9]+)/gi,'$1 $2') // ditto","\t\toutarr = [];","\t\twhile(text.length>0) {","\t\t\t","\t\t\tvar r = RegExp(\"^([0-9]+ st|[0-9]+ nd|[0-9]+ rd|[0-9]+ th)\",\"i\");","\t\t\tvar mat = text.match(r);","\t\t\tif(mat!=null) {","\t\t\t\toutarr[outarr.length] = mat[1].replace(/ /,'');","\t\t\t\ttext = text.replace(r,'');","\t\t\t}","\t\t\telse {","\t\t\t\tvar re = RegExp(\"^([0-9]+|[a-z]+|\\s+|[^0-9^a-z^\\s]+)\",\"i\");","\t\t\t\tvar m = text.match(re);","\t\t\t\tif(m!=null) {","\t\t\t\t\toutarr[outarr.length] = m[1];","\t\t\t\t\tre = RegExp(\"^\" + m[1].replace(/\\\\/gi,\"\\\\\\\\\"),\"i\");","\t\t\t\t\ttext = text.replace(re,'');","\t\t\t\t} else {","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn outarr;","\t}","\tfunction replace_numbers(text){","\t\t//to replace the numbers, split into words, if a ten is followed by a single then combine them, if a hundred is fo","\t\t","\t\tvar num_split = better_split(text); //find a better way to split****************************************************** DONE","\t\tvar last_number_type = null;","\t\tvar last_number_pos = null;","\t\tfor(var f=0; f<num_split.length; f++)","\t\t{","\t\t\tnum_split[f] = num_split[f].replace(/^[0]+/,'');","\t\t\tvar char_match = num_split[f].match(/[^0-9^a-z]+/i);","\t\t\tif(char_match!=null) continue;","\t\t\t//is it a regular number? if so remember the type and ignore","\t\t\tvar this_num = null;","\t\t\tvar positional = false;","\t\t\t","\t\t\tthis_num = parseInt(num_split[f]);","\t\t\tif(isNaN(this_num)) this_num=null;","\t\t\telse {","\t\t\t\tif(num_split[f].match(/st|nd|rd|th/gi)!=null)","\t\t\t\t\tpositional = true;","\t\t\t}","\t\t\tif(this_num!=null) {","\t\t\t\tif(this_num>0) {","\t\t\t\t\tif(last_number_type=='tens') {","\t\t\t\t\t\tthis_num = parseInt(num_split[last_number_pos]) + this_num;","\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t}","\t\t\t\t\telse if(last_number_type=='hundred') {","\t\t\t\t\t\tthis_num = parseInt(num_split[last_number_pos]) + this_num;","\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t}","\t\t\t\t\tlast_number_pos = f;","\t\t\t\t\tlast_number_type = 'single';","\t\t\t\t}","\t\t\t\telse if(this_num>9) {","\t\t\t\t\tif(last_number_type=='hundred') {","\t\t\t\t\t\tthis_num = parseInt(num_split[last_number_pos]) + this_num;","\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t}","\t\t\t\t\tlast_number_pos = f;","\t\t\t\t\tlast_number_type = 'tens';","\t\t\t\t}","\t\t\t\telse if(this_num>100) {","\t\t\t\t\tlast_number_pos = f;","\t\t\t\t\tlast_number_type = 'hundred';","\t\t\t\t}","\t\t\t}","\t\t\tif(this_num==null)","\t\t\t{","\t\t\t\tif(num_split[f]=='hundred') {","\t\t\t\t\tif(f>0&&last_number_type=='single') {","\t\t\t\t\t\tthis_num = 100 * parseInt(num_split[last_number_pos]);","\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t}","\t\t\t\t\telse{","\t\t\t\t\t\tthis_num = 100;","\t\t\t\t\t}","\t\t\t\t\tlast_number_pos = f;","\t\t\t\t\tlast_number_type='hundred';","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\t//try positional tens","\t\t\t\t\tfor(var t=0;t<pos_tens.length;t++){","\t\t\t\t\t\tif(num_split[f]==pos_tens[t]) {","\t\t\t\t\t\t\tif(last_number_type=='hundred') {","\t\t\t\t\t\t\t\tthis_num = parseInt(num_split[last_number_pos]) + ((t+2) * 10);","\t\t\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\telse{","\t\t\t\t\t\t\t\tthis_num = (t+2) * 10;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tpositional = true;","\t\t\t\t\t\t\tlast_number_pos = f;","\t\t\t\t\t\t\tlast_number_type = 'tens';","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tif(this_num==null){","\t\t\t\t\t\t//try tens","\t\t\t\t\t\tfor(var t=0;t<num_tens.length;t++){","\t\t\t\t\t\t\tif(num_split[f]==num_tens[t]) {","\t\t\t\t\t\t\t\tif(last_number_type=='hundred') {","\t\t\t\t\t\t\t\t\tthis_num = parseInt(num_split[last_number_pos]) + ((t+2) * 10);","\t\t\t\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\telse{","\t\t\t\t\t\t\t\t\tthis_num = (t+2) * 10;","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\tlast_number_pos = f;","\t\t\t\t\t\t\t\tlast_number_type = 'tens';","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tif(this_num==null) {","\t\t\t\t\t\t//try positional_numbers","\t\t\t\t\t\tfor(var t=0;t<pos_nos.length;t++){","\t\t\t\t\t\t\tif(num_split[f]==pos_nos[t]) {","\t\t\t\t\t\t\t\tif(last_number_type=='tens') {","\t\t\t\t\t\t\t\t\tthis_num = parseInt(num_split[last_number_pos]) + (t+1);","\t\t\t\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\telse if(last_number_type=='hundred') {","\t\t\t\t\t\t\t\t\tthis_num = parseInt(num_split[last_number_pos]) + (t+1);","\t\t\t\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\telse{","\t\t\t\t\t\t\t\t\tthis_num = (t+1);","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\tlast_number_pos = f;","\t\t\t\t\t\t\t\tlast_number_type = 'single';","\t\t\t\t\t\t\t\tpositional = true;","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tif(this_num==null) {","\t\t\t\t\t\t//try single numbers","\t\t\t\t\t\tfor(var t=0;t<num_singles.length;t++){","\t\t\t\t\t\t\tif(num_split[f]==num_singles[t]) {","\t\t\t\t\t\t\t\tif(last_number_type=='tens') {","\t\t\t\t\t\t\t\t\tthis_num = parseInt(num_split[last_number_pos]) + (t+1);","\t\t\t\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\telse if(last_number_type=='hundred') {","\t\t\t\t\t\t\t\t\tthis_num = parseInt(num_split[last_number_pos]) + (t+1);","\t\t\t\t\t\t\t\t\tnum_split[last_number_pos] = \"\";","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\telse{","\t\t\t\t\t\t\t\t\tthis_num = (t+1);","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\tlast_number_pos = f;","\t\t\t\t\t\t\t\tlast_number_type = 'single';","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tif(this_num==null) {","\t\t\t\tlast_number_pos = null;","\t\t\t\tlast_number_type = null;","\t\t\t}","\t\t\telse {","\t\t\t\t/*if(this_num>0) last_number_type = 'single';","\t\t\t\telse if(this_num>9) last_number_type = 'tens';","\t\t\t\telse if(this_num>100) last_number_type = 'hundred';*/","\t\t\t\tnum_split[f] = this_num;","\t\t\t\tif(positional) num_split[f] += 'st';","\t\t\t}","\t\t}","\t\tvar output = num_split.join(\"\");","\t\treturn output;","","\t\t//until the text is read, test the first bit of text against a word, decide what to do with it then delete that word from the text, if can't understand a word then find the next understandable word and send the garbage to the date interpreter","\t}","\tfunction interpret_date(text,type){","\t\t","\t\t//is it a range?","\t\ttext = text.toLowerCase();","\t\tvar is_positional = false;","\t\t","\t\tif(text.indexOf(\"st\")!=-1) is_positional = true;","\t\ttext = text.replace(/(\\b|[0-9])(st|nd|rd|th|of)\\b/gi,'$1');","\t\t/*if(text.match(/-/gi).length>1) {*/","\t\t\tranges = text.split(/\\sto\\s|\\s\\s-|>|>=/gi);","\t\t\trange_type = text.match(/\\sto\\s|\\s\\s-|>|>=/gi);","\t\t/*}","\t\telse {","\t\t\tranges = text.split(/\\sto\\s|-|>|>=/gi);","\t\t\trange_type = text.match(/\\sto\\s|-|>|>=/gi);","\t\t}*/","\t\tvar date = {","\t\t\terror: true","\t\t};","\t\tif(ranges.length==1) {","\t\t\t//not a range","\t\t\tdate = {from:parse_date_bit(ranges[0],is_positional),is_range:false};","\t\t}","\t\telse if(ranges.length==2) {","\t\t\t//good range","\t\t\tdate = {","\t\t\t\tfrom:parse_date_bit(ranges[0],is_positional),","\t\t\t\tto:parse_date_bit(ranges[1],is_positional),","\t\t\t\tinclusive:((\"\"+range_type).match(/=/gi)?true:false),","\t\t\t\tis_range:true","\t\t\t};","\t\t}","\t\telse {","\t\t\t","\t\t\t//bad range","\t\t}","\t\treturn date;","\t\t//bit = parse_date_bit(ranges[0],type);","\t}","\tfunction parse_date_bit(text,is_positional)","\t{","\t\t//could be ","\t\t/*","\t\t\tnumber","\t\t\tday of week","\t\t\tmonth","\t\t\tyear","\t\t\tday/month","\t\t\ttime (10am, 10.15am, 15:13, 4:42pm)","\t\t\tfull date","\t\t*/","\t\tvar time = null;","\t\tvar day = null;","\t\tvar month = null;","\t\tvar year = null;","\t\tvar type = null;","\t\tvar value = null;","\t\t//var is_positional = false;","\t\t","\t\ttext = text.replace(/^\\s+|\\s+$/gi,''); //trim","\t\ttext = text.replace(/\\s+/gi,' '); //remove double spaces","\t\t","\t\tvar sp = text.match(/([/\\.:\\\\,-]|am|pm)/gi);","\t\tif(sp==null) {","\t\t\t//its a number or a day of the week or a month","\t\t\tvar output = text;","\t\t\t","\t\t\t//check for dayname_monthname","\t\t\tvar dm_check = text.match(/^([a-z]+)[^0-9^a-z]+([a-z]+)$/);","\t\t\tif(dm_check!=null) {","\t\t\t\tvar tmp = parse_day_name(dm_check[1]);","\t\t\t\tif(typeof(tmp)=='number') {","\t\t\t\t\tvar tmpmon = parse_month_name(dm_check[2]);","\t\t\t\t\tif(typeof(tmpmon)=='number') {","\t\t\t\t\t\treturn {type:'day_name_month',value:tmp + \"/\" + tmpmon};","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\ttmp = parse_month_name(dm_check[1]);","\t\t\t\t\tif(typeof(tmp)=='number') {","\t\t\t\t\t\tvar tmpday = parse_day_name(dm_check[2]);","\t\t\t\t\t\tif(typeof(tmpday)=='number') {","\t\t\t\t\t\t\treturn {type:'day_name_month',value:tmpday + \"/\" + tmpmon};","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\t//check for dayname_monthname_year","\t\t\tvar dm_check = text.match(/^([a-z]+)[^0-9^a-z]+([a-z]+)[^0-9^a-z]+([0-9]+)$/);","\t\t\tif(dm_check!=null) {","\t\t\t\tvar year = parseInt(dm_check[3]);","\t\t\t\tif(year<50) year += 2000;","\t\t\t\telse if(year<100) year += 1900;","\t\t\t\tvar tmp = parse_day_name(dm_check[1]);","\t\t\t\tif(typeof(tmp)=='number') {","\t\t\t\t\tvar tmpmon = parse_month_name(dm_check[2]);","\t\t\t\t\tif(typeof(tmp)=='number') {","\t\t\t\t\t\treturn {type:'day_name_month_year',value:tmp + \"/\" + tmpmon + \"/\" + year};","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\ttmp = parse_month_name(dm_check[1]);","\t\t\t\t\tif(typeof(tmp)=='number') {","\t\t\t\t\t\tvar tmpday = parse_day_name(dm_check[2]);","\t\t\t\t\t\tif(typeof(tmpday)=='number') {","\t\t\t\t\t\t\treturn {type:'day_name_month_year',value:tmpday + \"/\" + tmpmon + \"/\" + year};","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","","\t\t\t//try for day/year month/year","\t\t\tvar all_letters = text.match(/^([a-z]+)[^0-9^a-z]+[0-9]+$/);","\t\t\tif(all_letters!=null) {","\t\t\t\tvar just_letters = all_letters[1];","\t\t\t\tif(just_letters!='') {","\t\t\t\t\tvar tmp = parse_day_name(just_letters);","\t\t\t\t\tif(tmp!='') {","\t\t\t\t\t\tvar y = text.match(/([0-9]+)/);","\t\t\t\t\t\tif(y!=null) {","\t\t\t\t\t\t\tvar year = parseInt(y[1]);","\t\t\t\t\t\t\tif(year<50) year += 2000;","\t\t\t\t\t\t\telse if(year<100) year += 1900;","\t\t\t\t\t\t\treturn {type:'day_name_year',value:tmp + \"/\" + year};","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif(just_letters!='') {","\t\t\t\t\tvar tmp = parse_month_name(just_letters);","\t\t\t\t\tif(tmp!='') {","\t\t\t\t\t\tvar y = text.match(/([0-9]+)/);","\t\t\t\t\t\tif(y!=null) {","\t\t\t\t\t\t\tvar year = parseInt(y[1]);","\t\t\t\t\t\t\tif(year>31 && !is_positional) {","\t\t\t\t\t\t\t\tif(year<50) year += 2000;","\t\t\t\t\t\t\t\telse if(year<100) year += 1900;","\t\t\t\t\t\t\t\treturn {type:'month_year',value:tmp + \"/\" + year};","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tif(text.indexOf(\" \")==-1) {","\t\t\t\toutput = parse_day_name(text);","\t\t\t\tif(typeof(output)=='number') return {type:'day_name',value:output}; //could be dayname, year","\t\t\t\toutput = parse_month_name(text);","\t\t\t\tif(typeof(output)=='number') return {type:'month',value:output};","\t\t\t}","\t\t}","\t\tsp = text.match(/([\\s/\\.:\\\\,-]|am|pm)/gi);","\t\tif(sp==null) {","\t\t\ttext = text.replace(/[^0-9]/gi,'');","\t\t\ttry{","\t\t\t\toutput = parseInt(text);","\t\t\t\tif(is_positional) return {type:'period_specifier_number',value:output};","\t\t\t\telse return {type:'number',value:output};","\t\t\t}catch(e){","","\t\t\t}","\t\t\treturn {type:'unknown',value:0};","\t\t}","\t\t//something more complex","\t\t//replace month with number","\t\tfor(var m=0;m<months.length;m++){","\t\t\tvar re = new RegExp(\"(\\\\b|[0-9])\" + months[m] + \"[a-z]*(\\\\b|[0-9])\",\"gi\");","\t\t\ttext = text.replace(re,function($0,$1,$2) {","\t\t\t\tmonth = m+1;","\t\t\t\tvar output = \"\" + (m+1) + \"\";","\t\t\t\tif($1.match(/[0-9]/gi)) ","\t\t\t\t\toutput =  \"/\" + output;","\t\t\t\tif($2.match(/[0-9]/gi))","\t\t\t\t\toutput = output + \"/\";","\t\t\t\treturn $1 + output + $2;","\t\t\t});","\t\t}","\t\ttext = text.replace(/(\\d+)\\s*([:\\.]*)\\s*(\\d*)\\s*(am|pm|)/gi,function($0,$1,$2,$3,$4){","\t\t\tif($0.replace(/^\\s+|\\s+$/gi,'')==$1) return $0;//just got a number it ain't nothing to worry about","\t\t\tvar hour = parseInt($1);","\t\t\tvar min = parseInt($3);","\t\t\tif(!min) min = \"00\";","\t\t\tif($4==\"pm\") hour += 12;","\t\t\tif(hour>24||min>59 || ($4==\"\"&&$2==\"\")) return $0;","\t\t\tif(min<10&&min>0) min = \"0\" + min;","\t\t\ttime = hour + \":\" + min;","\t\t\treturn '';","\t\t});","\t\tif(text==\"\")","\t\t{","\t\t\treturn {type:'time',value:time};","\t\t}","\t\t//get rid of daynames and other distractions","\t\tfor(var m=0;m<days.length;m++){","\t\t\tvar re = new RegExp(days[m] + \"[a-z]*\",\"gi\");","\t\t\ttext = text.replace(re,'');","\t\t};","\t\t","\t\t//split what we have left","\t\t//sp = text.split(/[\\s/\\.:\\\\,]/gi);","\t\ttext = text.replace(/(\\d+)[^\\d]*(\\d*)[^\\d]*(\\d*)/gi,function($0,$1,$2,$3){","\t\t\tif(parseInt($3)) {","\t\t\t\t//should do sql date format too ****************************************************","\t\t\t\tif(parseInt($1)>31) {","\t\t\t\t\t//sql format","\t\t\t\t\tyear = parseInt($1);","\t\t\t\t\tif(year<50) year += 2000;","\t\t\t\t\telse if(year<100) year += 1900;","\t\t\t\t\tif(parseInt($3)==month||parseInt($2)>12) {","\t\t\t\t\t\tmonth = parseInt($3);","\t\t\t\t\t\tday = parseInt($2);","\t\t\t\t\t} else {","\t\t\t\t\t\tif(month==null) month = parseInt($2);","\t\t\t\t\t\tday = parseInt($3);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tyear = parseInt($3);","\t\t\t\t\tif(year<50) year += 2000;","\t\t\t\t\telse if(year<100) year += 1900;","\t\t\t\t\tif(parseInt($1)==month||parseInt($2)>12) {","\t\t\t\t\t\tmonth = parseInt($1);","\t\t\t\t\t\tday = parseInt($2);","\t\t\t\t\t} else {","\t\t\t\t\t\tif(month==null) month = parseInt($2);","\t\t\t\t\t\tday = parseInt($1);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tvalue = year + \"/\" + month + \"/\" + day;","\t\t\t\tif(time!=null) value += \" \" + time;","\t\t\t\ttype = 'full_date';","\t\t\t\treturn '';","\t\t\t}","\t\t\tif(parseInt($2)) {","\t\t\t\t//this probably needs looking at***************************************************************************************","\t\t\t\tif(parseInt($1)==month) {","\t\t\t\t\tday = parseInt($2);","\t\t\t\t\tmonth = parseInt($1);","\t\t\t\t}else {","\t\t\t\t\tday = parseInt($1);","\t\t\t\t\tmonth = parseInt($2);","\t\t\t\t}","\t\t\t\tif(day>31) {","\t\t\t\t\tvar this_day = day;","\t\t\t\t\tif(day<50) this_day += 2000;","\t\t\t\t\telse if(day<100) this_day += 1900;","\t\t\t\t\t","\t\t\t\t\tif(month<13) {","\t\t\t\t\t\tvalue = month + \"/\" + this_day;","\t\t\t\t\t\ttype = 'month_year';","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\t/*could be a misreading*/","\t\t\t\t\t\tif(month<50) month += 2000;","\t\t\t\t\t\telse if(month<100) month += 1900;","\t\t\t\t\t\tvalue = day + \"/\" + month;","\t\t\t\t\t\ttype = 'month_year';","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse if(month>31) {","\t\t\t\t\tif(month<50) month += 2000;","\t\t\t\t\telse if(month<100) month += 1900;","\t\t\t\t\t//if(day<13) {","\t\t\t\t\t\tvalue = day + \"/\" + month;","\t\t\t\t\t\ttype = 'month_year';","\t\t\t\t\t/*}","\t\t\t\t\telse {","\t\t\t\t\t\tvalue = 0;","\t\t\t\t\t\ttype = 'unknown';","\t\t\t\t\t}*/","\t\t\t\t}","\t\t\t\telse if(month>12&&day>12) {","\t\t\t\t\tif(month<50) month += 2000;","\t\t\t\t\telse if(month<100) month += 1900;","\t\t\t\t\tif(day<13) {","\t\t\t\t\t\tvalue = day + \"/\" + month;","\t\t\t\t\t\ttype = 'month_year';","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\tvalue = 0;","\t\t\t\t\t\ttype = 'unknown';","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse if(month>12) {","\t\t\t\t\tvalue = month + \"/\" + day;","\t\t\t\t\ttype = 'day_month';","\t\t\t\t}","\t\t\t\t","\t\t\t\telse {","\t\t\t\t\tvalue = day + \"/\" + month;","\t\t\t\t\ttype = 'day_month';","\t\t\t\t}","\t\t\t\treturn '';","\t\t\t}","\t\t});","\t\treturn {type:type,value:value};","\t}","\tfunction parse_month_name(text){","\t\tfor(var m=0;m<months.length;m++){","\t\t\tvar re = new RegExp(\"^\" + months[m] + \"[a-z]*\",\"i\");","\t\t\tif(text.match(re)!=null)","\t\t\t\treturn m+1;","\t\t};","\t\treturn '';","\t}","\tfunction parse_day_name(text){","\t\tfor(var m=0;m<days.length;m++){","\t\t\tvar re = new RegExp(\"^\" + days[m] + \"[a-z]*\",\"i\");","\t\t\tif(text.match(re)!=null)","\t\t\t\treturn m+1;","\t\t};","\t\treturn '';","\t}","    function interpret_duration(text){","        text = replace_numbers(text.toLowerCase());","        text = text.replace(/half/gi, '30');","        text = text.replace(/quarter/gi, '15');","        var numbers = [];","        var split = better_split(text);","        var duration = 0;","        var nextPeriod = 'm';","        for(var f=0; f<split.length; f++) {","            //is it a number?","            if(split[f].match(/^an$|^[0-9]+$/)) {","                numbers.push(split[f].replace(/an/,'1'));  ","            }","            else if(split[f].indexOf('h')===0) {","                var num = numbers.splice(0,1);","                if(!num) {","                    num = 1;   ","                }","                duration += num * 60 * 60 * 1000;","                nextPeriod = 'm';","            }","            else if(split[f].indexOf('m')===0) {","                var num = numbers.splice(0,1);","                if(!num) {","                    num = 1;   ","                }","                duration += num * 60 * 1000;","                nextPeriod = 's';","            }","            else if(split[f].indexOf('s')===0) {","                var num = numbers.splice(0,1);","                if(!num) {","                    num = 1;   ","                }","                duration += num * 1000;","            }","            else if(split[f].indexOf(/[\\.:;\\/\\\\]/)===0) {","                   ","            }","        }","        if(numbers.length>0) {","            if(nextPeriod.indexOf('h')===0) {","                var num = numbers.splice(0,1);","                if(!num) {","                    num = 1;   ","                }","                duration += num * 60 * 60 * 1000;","            }","            else if(nextPeriod.indexOf('m')===0) {","                var num = numbers.splice(0,1);","                if(!num) {","                    num = 1;   ","                }","                duration += num * 60 * 1000;","            }","            else if(nextPeriod.indexOf('s')===0) {","                var num = numbers.splice(0,1);","                if(!num) {","                    num = 1;   ","                }","                duration += num * 1000;","            }          ","        }","        return duration;","    }","    function format_duration(duration) {","        var date = new Date(duration);","        var hh = date.getUTCHours();","        var mm = date.getUTCMinutes();","        var ss = date.getSeconds();","        var out = '';","        if(hh>0) {","            out += hh + (hh===1 ? ' hour ' : ' hours ');   ","        }","        if(mm>0) {","            out += mm + (mm===1 ? ' minute ' : ' minutes ');   ","        }","        if(ss>0) {","            out += ss + (ss===1 ? ' second ' : ' seconds ');   ","        }","        return out;           ","    }","\t$(function(){","\t\treset_date_inputs();","\t});","    ","    return {","        interpretText:function(text){","            return interpret_text(text);   ","        },","        interpretDuration:function(text){","            return interpret_duration(text);   ","        },","        formatDuration:function(duration){","            return format_duration(duration);   ","        }","    }","};","var iD = interpretDate();"]}]}]]},"ace":{"folds":[],"scrolltop":35941,"scrollleft":0,"selection":{"start":{"row":2621,"column":25},"end":{"row":2621,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1419698443357,"hash":"df454d5ac89eb196a46336f6267c28667d5509d5"}